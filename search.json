[{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/CONTRIBUTING.html","id":"bugs-suggestions-or-feature-requests","dir":"","previous_headings":"","what":"Bugs, suggestions or feature requests?","title":"CONTRIBUTING","text":"Submit issue Issues page - sure include R session information reproducible example.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/CONTRIBUTING.html","id":"code-contribution","dir":"","previous_headings":"","what":"Code contribution","title":"CONTRIBUTING","text":"want contribute package - awesome. Please get touch zizka.alexander@gmail.com.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_GBIF_data_with_CoordinateCleaner.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Cleaning GBIF data for the use in biogeography","text":"Big data aggregators Global Biodiversity Information Facility (GBIF, www.gbif.org) vastly increased public availability species occurrence records, GBIF alone comprising 800 million records across taxonomic groups. data provided via sources revolutionized scientific biogeography highly valuable research. However, issues exist concerning data quality, mostly data comprised variety different collection methods (museum specimens, scientific surveys, citizen science, population counts conservation purposes genetic barcoding among others) different sources (museums, herbaria, collections individual researchers, citizen science, photo apps) digitized edited various people algorithms different points time space. tutorial provide pipeline clean occurrence records retrieved GBIF (database) using CoordinateCleaner meta data. tutorial includes major steps consider necessary, means complete explicitly encourage explore data use. tutorial use data set occurrence records single species (lion, Panthera leo) downloaded GBIF. example can gauge quality cleaning steps, already good idea expect lions occur. course, usually multi-species data sets kind information, whole point automated cleaning. can easily follow tutorial using data instead. tutorial assume global macroecological analysis resolution 100km downstream analyses. Remember adjust test sensitivity, analyses coarser finer resolution. tutorial able : Visualize data identify potential problems 2. Use CoordinateCleaner automatically flag problematic records 3. Use GBIF provided meta-data improve coordinate quality, tailored downstream analyses 4. Use automated cleaning algorithms CoordinateCleaner identify problematic contributing datasets","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_GBIF_data_with_CoordinateCleaner.html","id":"identifying-erroneous-coordinates-with-coordinatecleaner","dir":"Articles","previous_headings":"","what":"Identifying erroneous coordinates with CoordinateCleaner","title":"Cleaning GBIF data for the use in biogeography","text":"clean_coordinates function wrapper function around record-level tests CoordinateCleaner. idea behind tests use geographic gazetteers identify records likely erroneous (imprecise). based choice tests common problems observed biological collection databases (Maldonado et al., 2015), including assignment country centroids, sea coordinate outliers among others. can get overview individual tests using ?clean_coordinates via package vignettes. tutorial assumes occurrence data format downloaded GBIF, formats might need adapt column names. might need install required packages tutorial using install.packages.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_GBIF_data_with_CoordinateCleaner.html","id":"install-coordinatecleaner","dir":"Articles","previous_headings":"Identifying erroneous coordinates with CoordinateCleaner","what":"Install CoordinateCleaner","title":"Cleaning GBIF data for the use in biogeography","text":"can install latest stable version CoordinateCleaner CRAN using install.packages(\"CoordinateCleaner\"). Alternatively can install latest development version GitHub using devtools package. recommend latter, stay --date. Also, make sure latest R version installed.","code":"install.packages(\"devtools\") library(devtools) install_github(\"ropensci/CoordinateCleaner\")"},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_GBIF_data_with_CoordinateCleaner.html","id":"set-up-libraries-and-data","dir":"Articles","previous_headings":"Identifying erroneous coordinates with CoordinateCleaner","what":"Set up libraries and data","title":"Cleaning GBIF data for the use in biogeography","text":"might need confirm install rnaturalearth package loading CoordinateCleaner","code":"library(countrycode) library(CoordinateCleaner) library(dplyr) library(ggplot2) library(rgbif) library(sf) #obtain data from GBIF via rgbif dat <- occ_search(scientificName = \"Panthera leo\",                    limit = 5000,                    hasCoordinate = TRUE)  dat <- dat$data  # names(dat) # a lot of columns  # select columns of interest dat <- dat %>%   dplyr::select(species, decimalLongitude,                  decimalLatitude, countryCode, individualCount,                 gbifID, family, taxonRank, coordinateUncertaintyInMeters,                 year, basisOfRecord, institutionCode, datasetName)  # remove records without coordinates dat <- dat %>%   filter(!is.na(decimalLongitude)) %>%   filter(!is.na(decimalLatitude))"},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_GBIF_data_with_CoordinateCleaner.html","id":"visualize-the-data-on-a-map","dir":"Articles","previous_headings":"Identifying erroneous coordinates with CoordinateCleaner","what":"Visualize the data on a map","title":"Cleaning GBIF data for the use in biogeography","text":"Occurrence records Panthera leo obtained GBIF. map clearly indicates, need prepare data , want represent current day (historic) distribution lions.","code":"#plot data to get an overview wm <- borders(\"world\", colour = \"gray50\", fill = \"gray50\") ggplot() +   coord_fixed() +   wm +   geom_point(data = dat,              aes(x = decimalLongitude, y = decimalLatitude),              colour = \"darkred\",              size = 0.5) +   theme_bw()"},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_GBIF_data_with_CoordinateCleaner.html","id":"option-a-using-the-clean_coordinates-wrapper-function","dir":"Articles","previous_headings":"Identifying erroneous coordinates with CoordinateCleaner > Use CoordinateCleaner to automatically flag problematic records","what":"Option A) Using the clean_coordinates wrapper function","title":"Cleaning GBIF data for the use in biogeography","text":"first step run automatic cleaning algorithm CoordinateCleaner. clean_coordinates function wrapper around large set automated cleaning steps flag errors common biological collections, including: sea coordinates, zero coordinates, coordinate - country mismatches, coordinates assigned country province centroids, coordinates within city areas, outlier coordinates coordinates assigned biodiversity institutions. can switch test individually using logical flags, modify sensitivity individual tests using “.rad” arguments, provide custom gazetteers using “.ref” arguments. See ?clean_coordinates help. use country - coordinate mismatch test need convert country ISO2 ISO3 format. Records flagged automated cleaning. automatic test flagged 7% records. purpose tutorial exclude flagged records, general recommendable explore .","code":"#convert country code from ISO2c to ISO3c dat$countryCode <-  countrycode(dat$countryCode,                                  origin =  'iso2c',                                 destination = 'iso3c')  #flag problems dat <- data.frame(dat) flags <- clean_coordinates(x = dat,                             lon = \"decimalLongitude\",                             lat = \"decimalLatitude\",                            countries = \"countryCode\",                            species = \"species\",                            tests = c(\"capitals\", \"centroids\",                                     \"equal\", \"zeros\", \"countries\")) # most test are on by default ## Testing coordinate validity ## Flagged 0 records. ## Testing equal lat/lon ## Flagged 0 records. ## Testing zero coordinates ## Flagged 0 records. ## Testing country capitals ## Flagged 36 records. ## Testing country centroids ## Flagged 1 records. ## Testing country identity ## Flagged 314 records. ## Flagged 350 of 5000 records, EQ = 0.07. summary(flags) plot(flags, lon = \"decimalLongitude\", lat = \"decimalLatitude\") ##    .val     .equ     .zer     .cap     .cen     .con .summary  ##       0        0        0       36        1      314      350 #Exclude problematic records dat_cl <- dat[flags$.summary,]  #The flagged records dat_fl <- dat[!flags$.summary,]"},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_GBIF_data_with_CoordinateCleaner.html","id":"option-b-using-the-magrittr-pipe","dir":"Articles","previous_headings":"Identifying erroneous coordinates with CoordinateCleaner > Use CoordinateCleaner to automatically flag problematic records","what":"Option B) Using the magrittr pipe (%>%)","title":"Cleaning GBIF data for the use in biogeography","text":"Alternatively, can run tests implemented CoordinateCleaner individual function connect using magrittr pipe operator, directly result data.frame comprising cleaned records. way, can also add individual test results columns initial data.frame:","code":"# To avoid specifying it in each function names(dat)[2:3] <- c(\"decimalLongitude\", \"decimalLatitude\")  clean <- dat %>%   cc_val() %>%   cc_equ() %>%   cc_cap() %>%   cc_cen() %>%   cc_coun(iso3 = \"countryCode\") %>%   cc_sea() %>%   cc_zero() %>%   cc_outl() %>%   cc_dupl() dat %>%     as_tibble() %>%      mutate(val = cc_val(., value = \"flagged\"),            sea = cc_sea(., value = \"flagged\"))"},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_GBIF_data_with_CoordinateCleaner.html","id":"temporal-outliers","dir":"Articles","previous_headings":"Identifying erroneous coordinates with CoordinateCleaner > Use CoordinateCleaner to automatically flag problematic records","what":"Temporal outliers","title":"Cleaning GBIF data for the use in biogeography","text":"cc_outl function identifies geographic outliers, record GBIF migh also doubtful temporal information, .e. time collection, can problematic example analyses range dynamics. cf_age function used fossil cleaning can also used check GBIF records temporal outliers.","code":"flags <- cf_age(x = dat_cl,                 lon = \"decimalLongitude\",                 lat = \"decimalLatitude\",                 taxon = \"species\",                  min_age = \"year\",                  max_age = \"year\",                  value = \"flagged\") # Testing temporal outliers on taxon level # Flagged 0 records.  dat_cl <- dat_cl[flags, ]"},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_GBIF_data_with_CoordinateCleaner.html","id":"improving-data-quality-using-gbif-meta-data","dir":"Articles","previous_headings":"","what":"Improving data quality using GBIF meta-data","title":"Cleaning GBIF data for the use in biogeography","text":"helped lot, unfortunately unwanted records remain, especially within Europe (Fig. \\(\\ref{fig:automated}\\)). mostly used occurrence records uncritically ignored meta-data. GBIF offers whole lot useful meta-data use now refine quality dataset. First ’ll remove coordinates low precision unsuitable data sources. remove records precision 100 km represent grain size downstream analysis, recommend chose based downstream analyses. also exclude fossils interested recent distributions; records unknown sources, deem reliable enough. histogram coordinate precision dataset.. next step remove records suspicious individual counts. GBIF includes records absence (individual count = 0) suspiciously high occurrence counts, might indicate inappropriate data data entry problems. might also want exclude old records, likely unreliable. instance, records second world war often imprecise, especially geo-referenced based political entities. Additionally old records might likely areas species went extinct (example due land-use change). Although problem dataset, still remove following code. top geographic cleaning, also want make sure include species level records records right taxon. latter problem case, one species, can helpful large datasets. Taxonomic problems spelling mistakes names synonyms can severe problem. ’ll treat taxonomic cleaning , need , check taxize R package taxonomic name resolution service (plants ). excluded almost 10% initial data points data cleaning, general picture improved considerably. confined records mostly can considered current day distribution species interest (Fig. \\(\\ref{fig:final}\\)). , however, also lost quite number records. general, “one-size-fits--” data quality geographic species occurrence records. course highest coordinate precision desirable, acceptable strongly depend downstream analyses. species distribution modelling, usually high precision necessary e.g. 1-10 km, analyses biogeographic reconstructions using tectonic plates, record might considered good enough quality, long right continent. another example conservation purposes might sufficient know species present within certain country.","code":"#Remove records with low coordinate precision dat_cl %>%    mutate(Uncertainty = coordinateUncertaintyInMeters / 1000) %>%    ggplot(aes(x = Uncertainty)) +    geom_histogram() +   xlab(\"Coordinate uncertainty in meters\") +   theme_bw() dat_cl <- dat_cl %>%   filter(coordinateUncertaintyInMeters / 1000 <= 100 | is.na(coordinateUncertaintyInMeters))  # Remove unsuitable data sources, especially fossils  # which are responsible for the majority of problems in this case table(dat$basisOfRecord)  ## HUMAN_OBSERVATION    MATERIAL_SAMPLE PRESERVED_SPECIMEN  ##              4979                  2                 19   dat_cl <- filter(dat_cl, basisOfRecord == \"HUMAN_OBSERVATION\" |                           basisOfRecord == \"OBSERVATION\" |                          basisOfRecord == \"PRESERVED_SPECIMEN\") #Individual count table(dat_cl$individualCount) ##  ##    1 ##    84 dat_cl <- dat_cl %>%   filter(individualCount > 0 | is.na(individualCount)) %>%   filter(individualCount < 99 | is.na(individualCount)) # high counts are not a problem #Age of records table(dat_cl$year) ## 2015 2016 2017 2018 2019 2020 2021 2022 2023  ## 308  351  612  547  750  323  408  736  470 dat_cl <- dat_cl %>%   filter(year > 1945) # remove records from before second world war table(dat_cl$family) #that looks good ##  ## Felidae  ##    4505 dat_cl <- dat_cl %>%   filter(family == 'Felidae')  table(dat_cl$taxonRank) # this is also good ##  ##   SPECIES SUBSPECIES  ##       520       3985"},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_GBIF_data_with_CoordinateCleaner.html","id":"improving-data-quality-using-external-information","dir":"Articles","previous_headings":"","what":"Improving data quality using external information","title":"Cleaning GBIF data for the use in biogeography","text":"Figure \\(\\ref{fig:final}\\) shows success automated cleaning. However, records within Europe North America remain. short inspection data suggests dubious human observation five specimens, potentially assigned specimen location, fossils misclassified meta-data. One option automatically flag records rerun outlier test cleaned data. However, likely also flag isolated Indian population (true presence) problematic.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_GBIF_data_with_CoordinateCleaner.html","id":"flag-records-based-on-fixed-longitude-and-latitude","dir":"Articles","previous_headings":"Improving data quality using external information","what":"Flag records based on fixed longitude and latitude","title":"Cleaning GBIF data for the use in biogeography","text":"first option alternative exclude records outside certain study extent. example easiest solution know lions occur high latitudes .","code":"#exclude based on study area dat_fin <- filter(dat_cl, decimalLatitude < 40)"},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_GBIF_data_with_CoordinateCleaner.html","id":"flag-records-based-on-species-natural-ranges","dir":"Articles","previous_headings":"Improving data quality using external information","what":"Flag records based on species natural ranges","title":"Cleaning GBIF data for the use in biogeography","text":"cases simple latitudinal longitudinal borders useful, alternative use species ranges external source reference flag records falling outside ranges. amphibians, birds, mammals reptiles International Union conservation nature (IUCN) provides detailed shape files species’ natural distribution ranges. can downloaded free https://www.iucnredlist.org/resources/spatial-data-download. CoordinateCleaner implements straight forward way use , , ranges flag records cc_iucn function. Since downloading IUCN shapes requires log-approximate lion’s natural range scratch example. plants check botanical countries World Checklist Selected Plant Families facilitated Royal Botanic Gardens, Kew. Species range polygon dataset occurrence lions different cleaning phases.","code":"#create simple natural range for lions coords_range <- cbind(cbind(c(-23, -7, 31, 71, 83, 42, 41, 24, -23), c(14, 37, 32, 27, 18, 0, -16, -38, 14))) wgs84 <- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"  nat_range <- terra::vect(coords_range, \"polygons\",                      crs = wgs84) nat_range$species <- \"Panthera leo\"   # Visualize range plo <- sf::st_as_sf(nat_range)  ## Regions defined for each Polygons ggplot() +   borders(\"world\", colour = \"gray50\", fill = \"gray50\") +   geom_sf(data = plo, aes(fill = species), alpha = 0.5) +   theme_bw() +   theme(legend.position = \"none\",         axis.title = element_blank()) # run cc_iucn() range_flags <- cc_iucn(x = dat_cl,                        range = nat_range,                        lon = \"decimalLongitude\",                        lat = \"decimalLatitude\",                        value = \"flagged\") ## Testing natural ranges ## Flagged 141 records. ## Warning message: ## In cc_iucn(x = dat_cl, range = nat_range, lon = \"decimalLongitude\",  : ##   reprojecting reference to '+proj=longlat +datum=WGS84 +no_defs' dat_fin <- dat_cl[range_flags, ]"},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_GBIF_data_with_CoordinateCleaner.html","id":"identifying-problematic-data-sets","dir":"Articles","previous_headings":"","what":"Identifying problematic data sets","title":"Cleaning GBIF data for the use in biogeography","text":"types potentially problematic coordinates can cause bias, identifiable record-level relevant meta-data missing. especially case erroneous records combined precise GPS-based point occurrences datasets mixed precision. Two important cases : () coordinate conversion errors based misinterpretation degree sign decimal delimiter (B) data derived rasterized data collection designs (e.g. presence 50x50 km grid cell). CoordinateCleaner implements two algorithms identify problems dataset level.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_GBIF_data_with_CoordinateCleaner.html","id":"identify-dataset-with-ddmm-to-dd-dd-conversion-error","dir":"Articles","previous_headings":"Identifying problematic data sets","what":"Identify dataset with ddmm to dd.dd conversion error","title":"Cleaning GBIF data for the use in biogeography","text":"first run test erroneous data conversion due misinterpretation degree sign decimal delimiter. use cd_ddmm function, alternatively, can use clean_dataset wrapper. See supplementary material S1 detailed description algorithm implementation test. can control output function via value argument. plot chunk clgbif18 looks good. test indicates slightly higher fraction records decimals .60 expected random, within expected range thus test indicates bias, confirmed diagnostic plot. case strong bias, green points clustered bottom left quarter plot.","code":"out.ddmm <- cd_ddmm(dat_cl, lon = \"decimalLongitude\", lat = \"decimalLatitude\",                      ds = \"species\", diagnostic = T, diff = 1,                     value = \"dataset\")"},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_GBIF_data_with_CoordinateCleaner.html","id":"test-for-rasterized-sampling","dir":"Articles","previous_headings":"Identifying problematic data sets","what":"Test for rasterized sampling","title":"Cleaning GBIF data for the use in biogeography","text":"second step use cd_round function identify datasets significant proportion coordinates collected large scale lattice designs. records might low precision might therefore problematic analyses. instance presence derived 1 degree grid national atlas might coarse small scale species distribution models. Diagnostic plots testing rasterized sampling excessive rounding. left panel shows histograms record distribution, right panel shows autocorrelation plots. upper panel shows longitude, lower panel shows latitude. logical flag heading right panel indicates binary flag. results look good. dataset show rasterized collection schemes (see Supplementary material S1 examples biased datasets). test detected flagged small scale low intensity periodicity longitude coordinates, however, entire dataset flagged longitude latitude show pattern (expected rasterized sampling). can modify test sensitivity using various arguments. See ?cd_round information. lion dataset relatively small consistent, least way comprises species. larger scale analyses might need deal larger datasets, composed larger variety sources.","code":"par(mfrow = c(2,2), mar = rep(2, 4)) out.round <- cd_round(dat_fin, lon = \"decimalLongitude\",                        lat = \"decimalLatitude\",                        ds = \"species\",                       value = \"dataset\",                       T1 = 7,                       graphs = T) ## Testing for rasterized collection"},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_PBDB_fossils_with_CoordinateCleaner.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Cleaning fossil data for the use in biogeography and palaeontology","text":"public availability fossils large-scale analyses rapidly increasing, mainly due increased databasing efforts data aggregators paleobiology database (www.paleobiodb.org) Neotoma (www.neotomadb.org), among others. However, data quality issue, particular, old collections collections uncertain taxonomy /bad preservation. Similar problems known biological collection databases (See supplementary material S2) relevant fossils, addition fossils might dated wrongly low precision. tutorial presents pipeline clean fossil data paleobiology database () using biogeographic evolutionary analyses. focus identifying overly imprecisely geo-referenced /dated records combining automated cleaning using CoordinateCleaner cleaning based meta-data. proposed steps means exhaustive, keep mind “good data” depends entirely downstream analyses! wrote tutorial (whole CoordinateCleaner package) help identify potential problems quicker reproducibly improve data quality large datasets. sake tutorial mostly remove flagged records dataset, however, recommend double check individually.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_PBDB_fossils_with_CoordinateCleaner.html","id":"install-coordinatecleaner","dir":"Articles","previous_headings":"","what":"Install CoordinateCleaner","title":"Cleaning fossil data for the use in biogeography and palaeontology","text":"can install latest stable version CoordinateCleaner (Currently 2.0-1) CRAN using install.packages(\"CoordinateCleaner\"). Alternatively can install latest development version GitHub using devtools package. recommend latter, stay --date. Also, make sure latest R version installed. tutorial, relevant R-code shown grey boxes, resulting output lines marked ##.","code":"install.packages(\"devtools\") library(devtools)  install_github(\"ropensci/CoordinateCleaner\")"},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_PBDB_fossils_with_CoordinateCleaner.html","id":"load-required-libraries","dir":"Articles","previous_headings":"","what":"Load required libraries","title":"Cleaning fossil data for the use in biogeography and palaeontology","text":"first step load R libraries required tutorial. might need install using install.packages.","code":"library(dplyr) library(ggplot2) library(CoordinateCleaner) library(countrycode) library(paleobioDB)"},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_PBDB_fossils_with_CoordinateCleaner.html","id":"load-test-dataset","dir":"Articles","previous_headings":"","what":"Load test dataset","title":"Cleaning fossil data for the use in biogeography and palaeontology","text":"tutorial use dataset vascular plant fossils last 65 million years, downloaded paleobiology database using plaeobioDB package. tutorial ’ll limit data maximum 5,000 records, keep downloading time reasonable. obtained data web mask paleobiology database, use entirely different database, adapt column names script. Alternatively, CoordinateCleaner includes example dataset, downloaded paleobioDB specified . use one rest tutorial.","code":"#load data dat <- paleobioDB::pbdb_occurrences(base_name = \"Magnoliopsida\",                                      vocab = \"pbdb\", limit = 5000,                         show = c(\"coords\", \"phylo\", \"attr\", \"loc\", \"time\", \"rem\")) dat <- dat %>% mutate(lng = as.numeric(lng),                 lat = as.numeric(lat),                 early_age = as.numeric(early_age),                late_age = as.numeric(late_age)) rownames(dat) <- NULL"},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_PBDB_fossils_with_CoordinateCleaner.html","id":"visualize-the-records-on-a-map","dir":"Articles","previous_headings":"","what":"Visualize the records on a map","title":"Cleaning fossil data for the use in biogeography and palaeontology","text":"first step visualize records map, get general overview. plot chunk unnamed-chunk-15","code":"#plot data to get an overview wm <- borders(\"world\", colour = \"gray50\", fill = \"gray50\") dat %>%    ggplot(aes(x = lng, y = lat)) +   coord_fixed() +   wm +   geom_point(              colour = \"darkred\",              size = 0.5) +   theme_bw()"},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_PBDB_fossils_with_CoordinateCleaner.html","id":"coordinatecleaner","dir":"Articles","previous_headings":"","what":"CoordinateCleaner","title":"Cleaning fossil data for the use in biogeography and palaeontology","text":"CoordinateCleaner includes suite automated tests identify problems common biological palaebiological databases.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_PBDB_fossils_with_CoordinateCleaner.html","id":"spatial-issues","dir":"Articles","previous_headings":"CoordinateCleaner","what":"Spatial issues","title":"Cleaning fossil data for the use in biogeography and palaeontology","text":"’ll first check coordinate validity check coordinates numeric part lat/lon coordinate reference system using cc_val. Looks good, test coordinates equal longitude latitude. can use test argument specify coordinates flagged absolute values identical (e.g. 56,-56). purpose tutorial, always exclude flagged records. want explore , means possible, use value = \"flagged\" argument, valid functions. case output value vector logical values length dat, TRUE = valid record, FALSE = flagged record. generally advisable check flagged records whenever possible, avoid data-loss false flags. ’ll also test records identical, close vicinity centroids political units. can modify buffer around centroid using buffer argument level testing (country centroids, province centroids, ) using test argument. case list geographic coordinates consider problematic, instance list cities can provide custom gazetteer using ref argument. Next test coordinates within country assigned . test bit tricky, also flag records, country name country column following ISO3 records assigned different political landscape. instance records former Western Eastern Germany. need convert country annotation column cc ISO2 ISO3; advisable double check records flagged, avoid unnecessary data loss (see ). Next test records bear coordinates hosting biodiversity institution GBIF headquarters, using institutions database CoordinateCleaner. country centroid test can change buffer around institutions buffer argument. Finally, test plain zero coordinates (e.g. 0/0).","code":"cl <- cc_val(dat, lat = \"lat\", lon = \"lng\") ## Testing coordinate validity ## Removed 0 records. cl <- cc_equ(cl, lat = \"lat\", lon = \"lng\") ## Testing equal lat/lon ## Removed 0 records. fl <- cc_equ(dat, value = \"flagged\", lat = \"lat\", lon = \"lng\") ## Testing equal lat/lon ## Flagged 0 records.  # extract and check the flagged records fl_rec <- dat[!fl,]  head(fl_rec) ##  [1] occurrence_no  record_type    collection_no  taxon_name     taxon_rank     taxon_no       matched_name   matched_rank   ##  [9] matched_no     early_interval late_interval  early_age      late_age       reference_no   lng            lat            ## [17] class          class_no       phylum         phylum_no      cc             state          geogscale      early_age.1    ## [25] late_age.1     cx_int_no      early_int_no   late_int_no    genus          genus_no       family         family_no      ## [33] order          order_no       county         reid_no        ## <0 rows> (or 0-length row.names) fl <- cc_cen(cl, lat = \"lat\", lon = \"lng\", value = \"flagged\") ## Testing country centroids ## Flagged 6 records. fl_rec <- cl[!fl, ] unique(fl_rec$cc) ## [1] JP ## Levels: NZ US CN IR KP AU UK FR JP DE CA RU KE ZM EG CD ZA TZ UG ET MX IT cl <- cl[fl, ] #adapt country code to ISO3, for country test cs_ma <- \"GBR\" names(cs_ma) <- \"UK\" cl$cc_iso3 <- countrycode(cl$cc, origin = \"iso2c\", destination = \"iso3c\", custom_match = cs_ma)  cl <- cc_coun(cl, lat = \"lat\", lon = \"lng\", iso3 = \"cc_iso3\") ## Testing country identity ## Removed 234 records. cl <- cc_inst(cl, lat = \"lat\", lon = \"lng\") ## Testing biodiversity institutions ## Removed 0 records. cl <- cc_gbif(cl, lat = \"lat\", lon = \"lng\") ## Testing GBIF headquarters, flagging records around Copenhagen ## Removed 0 records. cl <- cc_zero(cl, lat = \"lat\", lon = \"lng\") ## Testing zero coordinates ## Removed 0 records."},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_PBDB_fossils_with_CoordinateCleaner.html","id":"temporal-issues","dir":"Articles","previous_headings":"CoordinateCleaner","what":"Temporal issues","title":"Cleaning fossil data for the use in biogeography and palaeontology","text":"spatial cleaning mostly identical steps recent geographic records. Additionally  includes three functions test temporal dimension fossils. Fossil ages usually defined maximum minimum range, based geological strata. First exclude records without dating information (NA) test records equal minimum maximum range. Unless data includes absolutely dated fossils, likely data entry error. Next look age range (= max age - min age) record. age range dating precision can vary considerably, depending data available dating. many analyses, instance PyRate, imprecisely dated records suitable. Lets first look age ranges test dataset. plot chunk unnamed-chunk-24 individual records dated precision 60 million years!  offers two ways flag records based age range (1) based absolute age, e.g. age range > 35 million years (2) based age range outlier detection entire dataset (e.g. records much less precisely dated rest records) (3) based age range outlier detection taxon level (e.g.  records much less precisely dated  records. second third approach can combined offer flexibility absolute age limit, need consideration desired sensitivity. , run three variants illustration, use data decide one suitable depending downstream analyses. case (2) (3) can tweak test sensitivity using mltpl argument. plot chunk unnamed-chunk-25 Finally test outliers space-time, records either distant space time records (1) dataset (2) per taxon. test based quantile outlier detection can modified using various arguments. important carefully consider desired test sensitivity. See ?cf_outl help. Done! check many records flagged total, can compare two datasets. test combined removed 689 records (13.8%). want identify flagged records, double check correct , take look clean_fossils wrapper function . far good, significantly refined data needs. section 6 look meta-data refinement, , note two different ways run CoordinateCleaner. can connect functions directly row using magrittr pipe (%>%) operator. Alternatively can use clean_fossils, wrapper around quality tests provided CoordinateCleaner relevant fossil data. See ?CleanCoordiantesFOS help.","code":"cl <- cl[!is.na(cl$late_age),] cl <- cl[!is.na(cl$early_age),] cl <- cf_equal(cl, min_age = \"late_age\", max_age = \"early_age\") ## Testing age validity ## Removed 0 records. rang <- cl$early_age - cl$late_age hist(rang, breaks = 40, xlab = \"Date range [max age - min age]\", main = \"\") # Outlier dataset cl <- cf_range(cl, taxon = \"\", min_age = \"late_age\", max_age = \"early_age\") ## Testing temporal range outliers on dataset level ## Removed 57 records.  # Outlier per taxon cl <- cf_range(cl, taxon = \"taxon_name\", min_age = \"late_age\", max_age = \"early_age\") ## Testing temporal range outliers on taxon level ## Removed 86 records.  # Absolute age limit cl <- cf_range(cl, taxon = \"taxon_name\", min_age = \"late_age\",                 max_age = \"early_age\", method = \"time\", max_range = 35) ## Testing temporal range outliers on taxon level ## Removed 1 records.  rang <- cl$early_age - cl$late_age hist(rang, breaks = 40, xlab = \"Date range [max age - min age]\", main = \"\") # Outlier dataset cl <- cf_outl(cl, taxon = \"\", lat = \"lat\", lon = \"lng\",               min_age = \"late_age\", max_age = \"early_age\") ## Testing spatio-temporal outliers on dataset level ## Removed 256 records.  # Outlier taxon cl <- cf_outl(cl, taxon = \"taxon_name\", lat = \"lat\", lon = \"lng\",               min_age = \"late_age\", max_age = \"early_age\") ## Testing spatio-temporal outliers on taxon level ## Removed 30 records. nrow(dat) - nrow(cl) ## [1] 689 #adapt country code to ISO3, for country test cs_ma <- \"GBR\" names(cs_ma) <- \"UK\" dat$cc <- countrycode(dat$cc, origin = \"iso2c\", destination = \"iso3c\", custom_match = cs_ma)  cl <- dat %>%   cc_val(lat = \"lat\", lon = \"lng\") %>%   cc_equ(lat = \"lat\", lon = \"lng\") %>%   cc_cen(lat = \"lat\", lon = \"lng\") %>%   cc_coun(lat = \"lat\", lon = \"lng\", iso3 = \"cc\") %>%   cc_gbif(lat = \"lat\", lon = \"lng\") %>%   cc_inst(lat = \"lat\", lon = \"lng\") %>%   cc_zero(lat = \"lat\", lon = \"lng\") %>%   cf_equal(min_age = \"late_age\", max_age = \"early_age\") %>%   cf_range(     taxon = \"taxon_name\",     lat = \"lat\",     lon = \"lng\",     min_age = \"late_age\",     max_age = \"early_age\"   ) %>%   cf_outl(     taxon = \"taxon_name\",     lat = \"lat\",     lon = \"lng\",     min_age = \"late_age\",     max_age = \"early_age\"   ) #run automated testing flags <- clean_fossils(x = dat,                         lat = \"lat\",                        lon = \"lng\",                        taxon = \"taxon_name\",                        min_age = \"late_age\", max_age = \"early_age\",                         value = \"spatialvalid\")  head(flags) cl <- dat[flags$.summary,] #the cleaned records fl_rec <- dat[!flags$.summary,] # the flagged records for verification"},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_PBDB_fossils_with_CoordinateCleaner.html","id":"improving-data-quality-using-meta-data","dir":"Articles","previous_headings":"","what":"Improving data quality using meta-data","title":"Cleaning fossil data for the use in biogeography and palaeontology","text":"Usually, least type meta-data provided fossil occurrences, case paleobiology database. ’ll now explore see can identify problems.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_PBDB_fossils_with_CoordinateCleaner.html","id":"basic-taxonomy","dir":"Articles","previous_headings":"Improving data quality using meta-data","what":"Basic taxonomy","title":"Cleaning fossil data for the use in biogeography and palaeontology","text":"First ’ll take short look taxonomy. Fossil taxonomy complex composite databases often taxonomic issues extremely difficult resolve. basic checks test : 1. taxa dataset plants, 2. least identified genus level. required taxonomic level course depends downstream analyses, exclude everything genus species, reasonable approach PyRate analyses.","code":"#1. This looks OK table(cl$phylum) ##  ## Spermatophyta  ##          2220  #2. Taxonomic level of identification table(cl$taxon_rank) ##  ##  class   genus species  ##    371     502    1347 cl <- cl %>%   filter(taxon_rank %in% c(\"species\", \"genus\"))"},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_PBDB_fossils_with_CoordinateCleaner.html","id":"spatial-coordinates","dir":"Articles","previous_headings":"Improving data quality using meta-data","what":"Spatial coordinates","title":"Cleaning fossil data for the use in biogeography and palaeontology","text":"Paleobiology database includes information basis geographic data many records. expected records roughly geo-referenced, precision still relatively high many records.","code":"table(cl$geogscale) ##  ## small collection          outcrop       local area            basin  ##             1953             1750               79                0"},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_PBDB_fossils_with_CoordinateCleaner.html","id":"time","dir":"Articles","previous_headings":"Improving data quality using meta-data","what":"Time","title":"Cleaning fossil data for the use in biogeography and palaeontology","text":"checked potentially problematic records time space , definitively advisable check . plot chunk unnamed-chunk-33 plot chunk unnamed-chunk-33 minimum maximum ages look unproblematic, still records large temporal uncertainties, least one case minimum maximum age seem reversed. might informative cases, analysis might problematic, exclude records temporal uncertainty 20.442 million years, retain 95% data. arbitrary choice, ’ll choose suitable value based planned analyses.","code":"#minimum ages tail(table(cl$late_age)) ##  ##  63.3    66  70.6  93.5  93.9 100.5  ##    53   138     8     3     3    21  ggplot(cl)+   geom_histogram(aes(x = late_age)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. #maximum ages tail(table(cl$early_age)) ##  ##  70.6  83.5  99.6 100.5 105.3   113  ##   126     9     3    11     3    21  ggplot(cl) +   geom_histogram(aes(x = early_age)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`."},{"path":"https://docs.ropensci.org/CoordinateCleaner/articles/Cleaning_PBDB_fossils_with_CoordinateCleaner.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"Cleaning fossil data for the use in biogeography and palaeontology","text":"various cleaning steps outline , identified potential major caveats hopefully increased quality dataset. excluded significant fraction records (-76.52 %). Data quality delicate issue, especially fossils compound data bases usefulness individual records depend downstream analyses. hope find tutorial useful exploring data downloaded Paleobiology database explore quality fossil dataset.  #Writing result disk PyRate format want use fossil data estimate speciation extinction rates, correlation environmental factors biogeography, PyRate might useful . can use write_pyrate function CoordinateCleaner write ready--use PyRate input files now cleaned dataset disk. , additionally need assessment species extinct extant today, can provide via status argument write_pyrate. want specify path save file, use path argument instead fname.","code":"# replace  blanks in taxon names cl$taxon_name <- gsub(\"[[:blank:]]{1,}\",\"_\", cl$taxon_name)  #simulated current status, soley for demonstration purposes, replace with your own data mock_status <- data.frame(taxon_name = unique(cl$taxon_name),                           status = sample(c(\"extinct\", \"extant\"),                                            size = length(unique(cl$taxon_name)),                                            replace = TRUE))  #add current status to fossils cl2 <- inner_join(cl, mock_status, by = \"taxon_name\")  #Write PyRate input to disk write_pyrate(cl, fname = \"paleobioDB_angiosperms\", status = cl2$status,             taxon = \"taxon_name\", min_age = \"late_age\", max_age = \"early_age\")"},{"path":"https://docs.ropensci.org/CoordinateCleaner/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Zizka. Author, maintainer. Daniele Silvestro. Contributor. Tobias Andermann. Contributor. Josue Azevedo. Contributor. Camila Duarte Ritter. Contributor. Daniel Edler. Contributor. Harith Farooq. Contributor. Andrei Herdean. Contributor. Maria Ariza. Contributor. Ruud Scharn. Contributor. Sten Svanteson. Contributor. Niklas Wengstrom. Contributor. Vera Zizka. Contributor. Alexandre Antonelli. Contributor. Bruno Vilela. Contributor.            Bruno updated package remove dependencies sp, raster, rgdal, maptools, rgeos packages Irene Steves. Reviewer.            Irene reviewed package ropensci, see <https://github.com/ropensci/onboarding/issues/210> Francisco Rodriguez-Sanchez. Reviewer.            Francisco reviewed package ropensci, see <https://github.com/ropensci/onboarding/issues/210>","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zizka , Silvestro D, Andermann T, Azevedo J, Duarte Ritter C, Edler D, Farooq H, Herdean , Ariza M, Scharn R, Svanteson S, Wengstrom N, Zizka V, Antonelli (2019). “CoordinateCleaner: standardized cleaning occurrence records biological collection databases.” Methods Ecology Evolution, -7. doi:10.1111/2041-210X.13152, R package version 3.0.1, https://github.com/ropensci/CoordinateCleaner.","code":"@Article{,   title = {CoordinateCleaner: standardized cleaning of occurrence records from biological collection databases},   author = {Alexander Zizka and Daniele Silvestro and Tobias Andermann and Josue Azevedo and Camila {Duarte Ritter} and Daniel Edler and Harith Farooq and Andrei Herdean and Maria Ariza and Ruud Scharn and Sten Svanteson and Niklas Wengstrom and Vera Zizka and Alexandre Antonelli},   journal = {Methods in Ecology and Evolution},   number = {10},   pages = {-7},   year = {2019},   note = {R package version 3.0.1},   doi = {10.1111/2041-210X.13152},   url = {https://github.com/ropensci/CoordinateCleaner}, }"},{"path":"https://docs.ropensci.org/CoordinateCleaner/index.html","id":"coordinatecleaner-v30","dir":"","previous_headings":"","what":"Automated Cleaning of Occurrence Records from Biological\n    Collections","title":"Automated Cleaning of Occurrence Records from Biological\n    Collections","text":"CoordinateCleaner updated version 3.0 github CRAN adapt retirement sp raster. update may compatible analysis-pipelines build version 2.x* Automated flagging common spatial temporal errors biological palaeontological collection data, use conservation, ecology palaeontology. Specifically includes tests General coordinate validity Country province centroids Capital coordinates Coordinates biodiversity institutions Spatial outliers Temporal outliers Coordinate-country discordance Duplicated coordinates per species Assignment location GBIF headquarters Urban areas Seas Plain zeros Equal longitude latitude Rounded coordinates DDMM DD.DD coordinate conversion errors Large temporal uncertainty (fossils) Equal minimum maximum ages (fossils) Spatio-temporal outliers (fossils) CoordinateCleaner can particularly useful improve data quality using data GBIF (e.g. obtained rgbif) Paleobiology database (e.g. obtained paleobioDB) historical biogeography (e.g. BioGeoBEARS phytools), automated conservation assessment (e.g. speciesgeocodeR conR) species distribution modelling (e.g. dismo sdm). See scrubr taxize complementary taxonomic cleaning biogeo correcting spatial coordinate errors. See News update information.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/index.html","id":"stable-from-cran","dir":"","previous_headings":"","what":"Stable from CRAN","title":"Automated Cleaning of Occurrence Records from Biological\n    Collections","text":"","code":"install.packages(\"CoordinateCleaner\") library(CoordinateCleaner)"},{"path":"https://docs.ropensci.org/CoordinateCleaner/index.html","id":"developmental-from-github","dir":"","previous_headings":"","what":"Developmental from GitHub","title":"Automated Cleaning of Occurrence Records from Biological\n    Collections","text":"","code":"devtools::install_github(\"ropensci/CoordinateCleaner\") library(CoordinateCleaner)"},{"path":"https://docs.ropensci.org/CoordinateCleaner/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Automated Cleaning of Occurrence Records from Biological\n    Collections","text":"simple example:","code":"# Simulate example data minages <- runif(250, 0, 65) exmpl <- data.frame(species = sample(letters, size = 250, replace = TRUE),                     decimalLongitude = runif(250, min = 42, max = 51),                     decimalLatitude = runif(250, min = -26, max = -11),                     min_ma = minages,                     max_ma = minages + runif(250, 0.1, 65),                     dataset = \"clean\")  # Run record-level tests rl <- clean_coordinates(x = exmpl) summary(rl) plot(rl)  # Dataset level  dsl <- clean_dataset(exmpl)  # For fossils fl <- clean_fossils(x = exmpl,                           taxon = \"species\",                           lon = \"decimalLongitude\",                            lat = \"decimalLatitude\") summary(fl)  # Alternative example using the pipe library(tidyverse)  cl <- exmpl %>%   cc_val()%>%   cc_cap()%>%   cd_ddmm()%>%   cf_range(lon = \"decimalLongitude\",             lat = \"decimalLatitude\",             taxon  =\"species\")"},{"path":"https://docs.ropensci.org/CoordinateCleaner/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Automated Cleaning of Occurrence Records from Biological\n    Collections","text":"Pipelines cleaning data Global Biodiversity Information Facility (GBIF) Paleobiology Database (PaleobioDB) available .","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Automated Cleaning of Occurrence Records from Biological\n    Collections","text":"See CONTRIBUTING document.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Automated Cleaning of Occurrence Records from Biological\n    Collections","text":"Zizka , Silvestro D, Andermann T, Azevedo J, Duarte Ritter C, Edler D, Farooq H, Herdean , Ariza M, Scharn R, Svanteson S, Wengtrom N, Zizka V & Antonelli (2019) CoordinateCleaner: standardized cleaning occurrence records biological collection databases. Methods Ecology Evolution, 10(5):744-751, doi:10.1111/2041-210X.13152, https://github.com/ropensci/CoordinateCleaner","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/CoordinateCleaner-package.html","id":null,"dir":"Reference","previous_headings":"","what":"CoordinateCleaner — CoordinateCleaner-package","title":"CoordinateCleaner — CoordinateCleaner-package","text":"Automated Cleaning Occurrence Records Biological Collections","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/CoordinateCleaner-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CoordinateCleaner — CoordinateCleaner-package","text":"Automated flagging common spatial temporal errors biological paleontological collection data, use conservation, ecology paleontology. Includes automated tests easily flag (exclude) records assigned country province centroid, open ocean, headquarters Global Biodiversity Information Facility, urban areas location biodiversity institutions (museums, zoos, botanical gardens, universities). Furthermore identifies per species outlier coordinates, zero coordinates, identical latitude/longitude invalid coordinates. Also implements algorithm identify data sets significant proportion rounded coordinates. Especially suited large data sets. See <https://ropensci.github.io/CoordinateCleaner/> details tutorials.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/CoordinateCleaner-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CoordinateCleaner — CoordinateCleaner-package","text":"Alexander Zizka, Daniele Silvestro, Tobias Andermann, Josue Azevedo,  Camila Duarte Ritter, Daniel Edler, Harith Farooq, Andrei Herdean, Maria Ariza,  Ruud Scharn, Sten Svantesson, Niklas Wengstrom, Vera Zizka","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/aohi.html","id":null,"dir":"Reference","previous_headings":"","what":"Artificial Hotspot Occurrence Inventory — aohi","title":"Artificial Hotspot Occurrence Inventory — aohi","text":"data frame information Artificial Hotspot Occurrence Inventory (AHOI)  available Park et al 2022. details see reference.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/aohi.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Artificial Hotspot Occurrence Inventory — aohi","text":"https://onlinelibrary.wiley.com/doi/10.1111/jbi.14543","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/aohi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Artificial Hotspot Occurrence Inventory — aohi","text":"Park, D. S., Xie, Y., Thammavong, H. T., Tulaiha, R., & Feng, X.   (2023). Artificial Hotspot Occurrence Inventory (AHOI). Journal   Biogeography, 50, 441–449. doi:10.1111/jbi.14543","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/aohi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Artificial Hotspot Occurrence Inventory — aohi","text":"","code":"data(\"aohi\")"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/buffland.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Coastlines buffered by 1 degree — buffland","title":"Global Coastlines buffered by 1 degree — buffland","text":"SpatVector global coastlines, 1 degree buffer extent coastlines alternative reference cc_sea. Can useful identify species sea, without flagging records mangroves, marshes, etc.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/buffland.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Global Coastlines buffered by 1 degree — buffland","text":"https://www.naturalearthdata.com/downloads/10m-physical-vectors/","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/buffland.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Coastlines buffered by 1 degree — buffland","text":"","code":"data(\"buffland\")"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/buffsea.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Coastlines buffered by -1 degree — buffsea","title":"Global Coastlines buffered by -1 degree — buffsea","text":"SpatVector global coastlines, -1 degree buffer extent coastlines alternative reference cc_sea. Can useful identify marine species land without flagging records estuaries, etc.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/buffsea.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Global Coastlines buffered by -1 degree — buffsea","text":"https://www.naturalearthdata.com/downloads/10m-physical-vectors/","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/buffsea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Coastlines buffered by -1 degree — buffsea","text":"","code":"data(\"buffsea\")"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_aohi.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Coordinates in Artificial Hotspot Occurrence Inventory — cc_aohi","title":"Identify Coordinates in Artificial Hotspot Occurrence Inventory — cc_aohi","text":"Removes flags records within Artificial Hotspot Occurrence Inventory. Poorly geo-referenced occurrence records biological databases often erroneously geo-referenced highly recurring coordinates assessed Park et al 2022. See reference details.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_aohi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Coordinates in Artificial Hotspot Occurrence Inventory — cc_aohi","text":"","code":"cc_aohi(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   species = \"species\",   taxa = c(\"Aves\", \"Insecta\", \"Mammalia\", \"Plantae\"),   buffer = 10000,   geod = TRUE,   value = \"clean\",   verbose = TRUE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_aohi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Coordinates in Artificial Hotspot Occurrence Inventory — cc_aohi","text":"x data.frame. Containing geographical coordinates species names. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. species character string. column species identity. required verify = TRUE. taxa Artificial Hotspot Occurrence Inventory (AHOI) created based four different taxa, birds, insecta, mammalia, plantae. Users can choose keep , specific taxa subset define AHOI locations. Default keep : c(\"Aves\", \"Insecta\", \"Mammalia\", \"Plantae\"). buffer buffer around capital coordinate (centre city), records flagged problematic. Units depend geod. Default = 10 kilometres. geod logical. TRUE radius around capital calculated based sphere, buffer meters independent latitude. FALSE radius calculated assuming planar coordinates varies slightly latitude. Default = TRUE. See https://seethedatablog.wordpress.com/ detail credits. value character string.  Defining output value. See value. verbose logical. TRUE reports name test number records flagged.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_aohi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Coordinates in Artificial Hotspot Occurrence Inventory — cc_aohi","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_aohi.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify Coordinates in Artificial Hotspot Occurrence Inventory — cc_aohi","text":"See https://ropensci.github.io/CoordinateCleaner/ details tutorials.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_aohi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Identify Coordinates in Artificial Hotspot Occurrence Inventory — cc_aohi","text":"Park, D. S., Xie, Y., Thammavong, H. T., Tulaiha, R., & Feng, X.   (2023). Artificial Hotspot Occurrence Inventory (AHOI). Journal   Biogeography, 50, 441–449. doi:10.1111/jbi.14543","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_aohi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Coordinates in Artificial Hotspot Occurrence Inventory — cc_aohi","text":"","code":"x <- data.frame(species = letters[1:10],                  decimalLongitude = c(runif(99, -180, 180), -47.92),                  decimalLatitude = c(runif(99, -90,90), -15.78)) cc_aohi(x) #> Testing Artificial Hotspot Occurrence Inventory #> Removed 0 records. #>     species decimalLongitude decimalLatitude #> 1         a     -150.9299505     -5.51082603 #> 2         b      120.3598934     55.02240553 #> 3         c       36.2739190     56.52923581 #> 4         d     -123.4049611    -17.29601964 #> 5         e     -177.3362012    -50.68241843 #> 6         f      -12.0983410    -14.69494758 #> 7         g       -0.8001401     30.39673460 #> 8         h      -75.6837919      1.37705076 #> 9         i       83.8375153     28.86467517 #> 10        j       98.1077440      2.12243648 #> 11        a      134.8562379     60.39943866 #> 12        b     -117.0213743     37.58060904 #> 13        c     -167.6731202     67.35706936 #> 14        d      -64.6611369    -87.93368317 #> 15        e      -35.1618342     69.88492223 #> 16        f     -109.5588595     89.34244540 #> 17        g      -34.7262777      0.03447016 #> 18        h     -157.0818754    -25.38593561 #> 19        i      -40.0675273     49.48434401 #> 20        j      171.1972207     15.20554516 #> 21        a      -75.6387737     24.11574678 #> 22        b       64.2169539     64.55990786 #> 23        c       84.7150556     12.04098097 #> 24        d     -109.4555761    -44.46053652 #> 25        e      172.9942829     75.38457862 #> 26        f       86.9477505     66.12303687 #> 27        g     -161.4793405    -45.26303456 #> 28        h       10.8764869    -17.48138187 #> 29        i       70.4965964     48.53343168 #> 30        j       67.8801612    -68.49263258 #> 31        a     -168.7570829    -54.95490690 #> 32        b      -98.7974876    -60.37753532 #> 33        c      -71.7009098     29.37718463 #> 34        d       49.1276214     64.18350081 #> 35        e       -7.5511621     76.77836071 #> 36        f      -24.4183471      9.42796703 #> 37        g       74.3161816     13.87182499 #> 38        h      161.4875675     33.74059421 #> 39        i     -115.0780435    -45.95071867 #> 40        j     -101.9160445    -81.96891150 #> 41        a       64.8586503     73.77382020 #> 42        b       -0.4155802    -77.27738054 #> 43        c       51.0045654     89.44046522 #> 44        d       57.7023657     20.13343514 #> 45        e     -145.4313031    -58.93940777 #> 46        f       95.6160590     73.69937373 #> 47        g       97.0829295    -83.25878996 #> 48        h      176.6564324     16.83968226 #> 49        i      169.3875250    -47.34404013 #> 50        j      -39.8942062     73.13350801 #> 51        a      -13.9728727     57.39713713 #> 52        b      -66.5129691     35.96928430 #> 53        c     -117.1166782    -50.39994074 #> 54        d       11.3664747     41.03836890 #> 55        e       -2.2906742    -50.92479679 #> 56        f      100.5511053     -7.87856431 #> 57        g     -106.4957966    -30.09604351 #> 58        h       76.8230204     12.30348034 #> 59        i     -156.5221998    -44.60296953 #> 60        j      -52.4855524     -6.47755799 #> 61        a      117.0717916     75.17889124 #> 62        b      -81.4254317     85.11195922 #> 63        c       25.2161824     57.43484039 #> 64        d      -59.1411310     72.52628367 #> 65        e       34.6546040     14.64588792 #> 66        f     -111.0535087     49.14152660 #> 67        g      161.1950176     89.12214476 #> 68        h       15.2929471     37.97482495 #> 69        i       16.0572216    -51.31033278 #> 70        j      -79.7050246    -37.48362661 #> 71        a      -19.1871111     39.91675128 #> 72        b      -46.2559736     65.99082660 #> 73        c     -169.8980492    -47.07844083 #> 74        d      -12.2446113    -89.19066455 #> 75        e      -39.5887006     79.83296356 #> 76        f     -172.7765216    -11.13530392 #> 77        g      -44.2904660     45.10859908 #> 78        h       21.5686224     30.20683760 #> 79        i      128.5500910    -16.56482373 #> 80        j      -41.4685040    -26.77521331 #> 81        a       10.0501328     42.85648107 #> 82        b       36.2295085     29.57138871 #> 83        c      -85.9063110    -74.65955397 #> 84        d      -75.5819418     64.10378820 #> 85        e       -7.1729374    -76.14300210 #> 86        f      151.2019966     63.51206461 #> 87        g      -35.7407335    -70.85754704 #> 88        h     -103.2578240     -2.73549177 #> 89        i       61.8360537    -45.50056013 #> 90        j     -158.8989200     33.58245791 #> 91        a      178.9448887    -60.54782433 #> 92        b     -126.3472318     81.50846397 #> 93        c        6.6803888    -32.06618080 #> 94        d      124.6032197    -24.92385898 #> 95        e       78.5771007     69.79021515 #> 96        f      -93.1269528     59.04259520 #> 97        g       16.9356126    -71.88183761 #> 98        h      120.5286535     73.08928400 #> 99        i     -169.9358308     49.09146560 #> 100       j      -47.9200000    -15.78000000"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_cap.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Coordinates in Vicinity of Country Capitals. — cc_cap","title":"Identify Coordinates in Vicinity of Country Capitals. — cc_cap","text":"Removes flags records within certain radius around country capitals. Poorly geo-referenced occurrence records biological databases often erroneously geo-referenced capitals.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_cap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Coordinates in Vicinity of Country Capitals. — cc_cap","text":"","code":"cc_cap(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   species = \"species\",   buffer = 10000,   geod = TRUE,   ref = NULL,   verify = FALSE,   value = \"clean\",   verbose = TRUE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_cap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Coordinates in Vicinity of Country Capitals. — cc_cap","text":"x data.frame. Containing geographical coordinates species names. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. species character string. column species identity. required verify = TRUE. buffer buffer around capital coordinate (centre city), records flagged problematic. Units depend geod. Default = 10 kilometres. geod logical. TRUE radius around capital calculated based sphere, buffer meters independent latitude. FALSE radius calculated assuming planar coordinates varies slightly latitude. Default = TRUE. See https://seethedatablog.wordpress.com/ detail credits. ref SpatVector (geometry: polygons). Providing geographic gazetteer. Can SpatVector (geometry: polygons), structure must identical countryref.  Default = countryref. verify logical. TRUE records flagged record given species flagged close given reference. FALSE, distance criterion value character string.  Defining output value. See value. verbose logical. TRUE reports name test number records flagged.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_cap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Coordinates in Vicinity of Country Capitals. — cc_cap","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_cap.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify Coordinates in Vicinity of Country Capitals. — cc_cap","text":"See https://ropensci.github.io/CoordinateCleaner/   details tutorials.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_cap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Coordinates in Vicinity of Country Capitals. — cc_cap","text":"","code":"if (FALSE) { x <- data.frame(species = letters[1:10],                 decimalLongitude = c(runif(99, -180, 180), -47.882778),                 decimalLatitude = c(runif(99, -90, 90), -15.793889))  cc_cap(x) cc_cap(x, value = \"flagged\") }"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_cen.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Coordinates in Vicinity of Country and Province Centroids — cc_cen","title":"Identify Coordinates in Vicinity of Country and Province Centroids — cc_cen","text":"Removes flags records within radius around geographic centroids political countries provinces. Poorly geo-referenced occurrence records biological databases often erroneously geo-referenced centroids.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_cen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Coordinates in Vicinity of Country and Province Centroids — cc_cen","text":"","code":"cc_cen(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   species = \"species\",   buffer = 1000,   geod = TRUE,   test = \"both\",   ref = NULL,   verify = FALSE,   value = \"clean\",   verbose = TRUE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_cen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Coordinates in Vicinity of Country and Province Centroids — cc_cen","text":"x data.frame. Containing geographical coordinates species names. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. species character string. column species identity. required verify = TRUE. buffer numerical. buffer around province country centroid, records flagged problematic. Units depend geod.   Default = 1 kilometre. geod logical. TRUE radius around capital calculated based sphere, buffer meters independent latitude. FALSE radius calculated assuming planar coordinates varies slightly latitude. Default = TRUE. See https://seethedatablog.wordpress.com/ detail credits. test character string. Specifying details test. One c(“”, “country”, “provinces”).  tests country province centroids. ref SpatVector (geometry: polygons). Providing geographic gazetteer. Can SpatVector (geometry: polygons), structure must identical countryref.  Default = countryref. verify logical. TRUE records flagged record given species flagged close given reference. FALSE, distance criterion value character string.  Defining output value. See value. verbose logical. TRUE reports name test number records flagged.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_cen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Coordinates in Vicinity of Country and Province Centroids — cc_cen","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_cen.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify Coordinates in Vicinity of Country and Province Centroids — cc_cen","text":"See https://ropensci.github.io/CoordinateCleaner/ details tutorials.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_cen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Coordinates in Vicinity of Country and Province Centroids — cc_cen","text":"","code":"x <- data.frame(species = letters[1:10],                  decimalLongitude = c(runif(99, -180, 180), -47.92),                  decimalLatitude = c(runif(99, -90,90), -15.78)) cc_cen(x, geod = FALSE) #> Testing country centroids #> Removed 0 records. #>     species decimalLongitude decimalLatitude #> 1         a       -41.986559      -67.231328 #> 2         b       179.874885       78.719439 #> 3         c       -54.252343      -51.051559 #> 4         d       161.034576       29.896562 #> 5         e      -102.204009      -53.297878 #> 6         f      -168.446625        8.746459 #> 7         g      -127.686296       58.950255 #> 8         h       127.578200      -67.039623 #> 9         i      -103.266248      -42.986499 #> 10        j      -104.288134      -38.084935 #> 11        a      -165.772552      -87.341577 #> 12        b       160.118929       63.670271 #> 13        c       -91.825925      -15.471391 #> 14        d       101.204125       45.182492 #> 15        e       -76.234619       39.422512 #> 16        f       135.128848        2.763954 #> 17        g       -73.529966       85.470526 #> 18        h       174.069147      -25.060039 #> 19        i        32.341520      -59.328809 #> 20        j        93.297017       50.965321 #> 21        a       120.987110      -84.433699 #> 22        b        94.615009       52.095665 #> 23        c       -29.782827      -60.011338 #> 24        d      -130.293057      -84.831738 #> 25        e      -150.895814       51.471210 #> 26        f        56.153745       58.555415 #> 27        g        36.721389       83.743275 #> 28        h        56.518499      -21.844588 #> 29        i       -61.445821      -58.610461 #> 30        j       172.610719       18.675072 #> 31        a        77.467008       54.983472 #> 32        b       134.146910      -83.397706 #> 33        c       173.982149       41.923920 #> 34        d      -101.317323      -51.250922 #> 35        e        59.230823      -87.119434 #> 36        f       -39.756946      -66.851536 #> 37        g      -163.417090       33.491359 #> 38        h        42.089241       25.549428 #> 39        i        35.450998      -31.079066 #> 40        j       -33.532693      -20.253243 #> 41        a       128.998134       37.350071 #> 42        b         6.365227       35.577977 #> 43        c       172.545628       76.618218 #> 44        d      -173.874352       -7.376810 #> 45        e        62.441217       17.271756 #> 46        f       -46.342842      -60.298022 #> 47        g       150.483829       12.043761 #> 48        h        64.072114       71.653927 #> 49        i        59.454886       17.005011 #> 50        j        92.174792       59.704185 #> 51        a        15.421376       16.813506 #> 52        b       -93.856285       50.214714 #> 53        c         3.201686      -18.401104 #> 54        d       -29.784826       62.978899 #> 55        e        81.701587       43.532205 #> 56        f        49.566799      -32.797761 #> 57        g       -37.292416      -69.897560 #> 58        h       165.413739      -71.802834 #> 59        i       -72.483109       54.017595 #> 60        j      -161.927580      -21.609586 #> 61        a        27.427471      -80.513825 #> 62        b      -101.553909       87.571566 #> 63        c      -134.691743       18.751314 #> 64        d       157.734967      -63.219110 #> 65        e       108.459046        6.976831 #> 66        f        92.899303      -67.357939 #> 67        g        11.723459       83.372716 #> 68        h        16.849719      -81.551697 #> 69        i      -145.466459      -60.946347 #> 70        j       -40.194089       78.567737 #> 71        a      -117.953320       84.722645 #> 72        b        68.661305       37.849329 #> 73        c        63.075061       69.316367 #> 74        d       160.666145       85.837557 #> 75        e      -109.360972      -83.718064 #> 76        f       168.709501      -11.023692 #> 77        g       -40.645340       26.004557 #> 78        h        54.123804       89.069833 #> 79        i       113.254633      -33.360728 #> 80        j      -154.452682       64.058754 #> 81        a         9.658917        7.260783 #> 82        b        94.850937       67.215123 #> 83        c       -23.260809        2.805412 #> 84        d        18.890041       66.502674 #> 85        e      -106.548967       64.174067 #> 86        f      -168.830634      -27.777027 #> 87        g       169.094541      -89.981336 #> 88        h      -115.699286      -53.067646 #> 89        i       100.185403       80.139688 #> 90        j       138.855887      -39.359968 #> 91        a       121.120650       68.568159 #> 92        b        37.932639       83.000930 #> 93        c       146.476605      -89.276678 #> 94        d      -167.072469        9.522037 #> 95        e      -132.689336      -50.537525 #> 96        f      -146.149068       26.410886 #> 97        g        70.770117       40.986368 #> 98        h       -33.937660       67.065740 #> 99        i      -156.370810      -21.243322 #> 100       j       -47.920000      -15.780000  if (FALSE) { cc_inst(x, value = \"flagged\", buffer = 50000) #geod = T }"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_coun.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Coordinates Outside their Reported Country — cc_coun","title":"Identify Coordinates Outside their Reported Country — cc_coun","text":"Removes flags mismatches geographic coordinates additional country information (usually information reliably reported specimens). mismatch can occur example, latitude longitude switched.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_coun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Coordinates Outside their Reported Country — cc_coun","text":"","code":"cc_coun(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   iso3 = \"countrycode\",   value = \"clean\",   ref = NULL,   ref_col = \"iso_a3\",   verbose = TRUE,   buffer = NULL )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_coun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Coordinates Outside their Reported Country — cc_coun","text":"x data.frame. Containing geographical coordinates species names. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. iso3 character string. column country assignment record three letter ISO code. Default = “countrycode”. value character string.  Defining output value. See value. ref SpatVector (geometry: polygons). Providing geographic gazetteer. Can SpatVector (geometry: polygons), structure must identical rnaturalearth::ne_countries(scale = \"medium\", returnclass = \"sf\"). Default = rnaturalearth::ne_countries(scale = \"medium\", returnclass = \"sf\") ref_col column name reference dataset, containing relevant ISO codes matching. Default \"iso_a3_eh\" refers ISO-3 codes reference dataset. See notes. verbose logical. TRUE reports name test number records flagged. buffer numeric. Units meters. provided, buffer created around country polygon.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_coun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Coordinates Outside their Reported Country — cc_coun","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_coun.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify Coordinates Outside their Reported Country — cc_coun","text":"ref_col argument allows adapt function structure   alternative reference datasets. instance,   rnaturalearth::ne_countries(scale = \"small\"), default fail,   ref_col = \"iso_a3\" work. default reference, records flagged fall outside   terrestrial territory countries, hence records territorial waters   might flagged. See https://ropensci.github.io/CoordinateCleaner/   details tutorials.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_coun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Coordinates Outside their Reported Country — cc_coun","text":"","code":"if (FALSE) { x <- data.frame(species = letters[1:10],                 decimalLongitude = runif(100, -20, 30),                 decimalLatitude = runif(100, 35,60),                 countrycode = \"RUS\")  cc_coun(x, value = \"flagged\")#non-terrestrial records are flagged as wrong. }"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_dupl.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Duplicated Records — cc_dupl","title":"Identify Duplicated Records — cc_dupl","text":"Removes flags duplicated records based species name coordinates, well user-defined additional columns. True (specimen) duplicates duplicates species can make bulk records biological collection database, undesirable many analyses. can flagged function, former given enough additional information.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_dupl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Duplicated Records — cc_dupl","text":"","code":"cc_dupl(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   species = \"species\",   additions = NULL,   value = \"clean\",   verbose = TRUE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_dupl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Duplicated Records — cc_dupl","text":"x data.frame. Containing geographical coordinates species names. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. species character string. column species name. Default = “species”. additions vector character strings. Additional columns included test duplication. example , collector name collector number. value character string.  Defining output value. See value. verbose logical. TRUE reports name test number records flagged.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_dupl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Duplicated Records — cc_dupl","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_dupl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Duplicated Records — cc_dupl","text":"","code":"x <- data.frame(species = letters[1:10],                  decimalLongitude = sample(x = 0:10, size = 100, replace = TRUE),                  decimalLatitude = sample(x = 0:10, size = 100, replace = TRUE),                 collector = \"Bonpl\",                 collector.number = c(1001, 354),                 collection = rep(c(\"K\", \"WAG\",\"FR\", \"P\", \"S\"), 20))  cc_dupl(x, value = \"flagged\") #> Testing duplicates #> Flagged 3 recordscc_dupl(x, additions = c(\"collector\", \"collector.number\")) #> Testing duplicates #> Removed 3 records. #>     species decimalLongitude decimalLatitude collector collector.number #> 1         a               10               4     Bonpl             1001 #> 2         b                7               4     Bonpl              354 #> 3         c                1               0     Bonpl             1001 #> 4         d                5               4     Bonpl              354 #> 5         e                5               8     Bonpl             1001 #> 6         f                0               9     Bonpl              354 #> 7         g                4               3     Bonpl             1001 #> 8         h                4              10     Bonpl              354 #> 9         i                5               5     Bonpl             1001 #> 10        j                8               9     Bonpl              354 #> 11        a                0               2     Bonpl             1001 #> 12        b                0               2     Bonpl              354 #> 13        c                8               0     Bonpl             1001 #> 14        d                3               7     Bonpl              354 #> 15        e                1               4     Bonpl             1001 #> 16        f                7               8     Bonpl              354 #> 17        g                6               3     Bonpl             1001 #> 18        h                6               2     Bonpl              354 #> 19        i               10               8     Bonpl             1001 #> 20        j                9               9     Bonpl              354 #> 21        a                6               8     Bonpl             1001 #> 22        b                5               0     Bonpl              354 #> 23        c                4               7     Bonpl             1001 #> 24        d                9               5     Bonpl              354 #> 25        e                8               9     Bonpl             1001 #> 26        f                5               5     Bonpl              354 #> 27        g                7               7     Bonpl             1001 #> 28        h                2               2     Bonpl              354 #> 29        i                9               4     Bonpl             1001 #> 30        j                9               8     Bonpl              354 #> 31        a               10               5     Bonpl             1001 #> 32        b                1               9     Bonpl              354 #> 33        c                9               0     Bonpl             1001 #> 34        d                6               8     Bonpl              354 #> 35        e                6               3     Bonpl             1001 #> 36        f                3               5     Bonpl              354 #> 37        g                6               5     Bonpl             1001 #> 38        h                9               0     Bonpl              354 #> 39        i                1              10     Bonpl             1001 #> 40        j                8               2     Bonpl              354 #> 41        a                9              10     Bonpl             1001 #> 43        c                9               8     Bonpl             1001 #> 44        d                1              10     Bonpl              354 #> 45        e                1               0     Bonpl             1001 #> 46        f                8               9     Bonpl              354 #> 47        g                0               1     Bonpl             1001 #> 48        h                0               7     Bonpl              354 #> 49        i                0               9     Bonpl             1001 #> 50        j                0               9     Bonpl              354 #> 51        a                8               0     Bonpl             1001 #> 52        b                1               3     Bonpl              354 #> 53        c                2               8     Bonpl             1001 #> 54        d                8              10     Bonpl              354 #> 55        e                4               0     Bonpl             1001 #> 56        f                7               1     Bonpl              354 #> 57        g                5               2     Bonpl             1001 #> 58        h               10               1     Bonpl              354 #> 59        i                0               0     Bonpl             1001 #> 60        j                3               7     Bonpl              354 #> 61        a                9               8     Bonpl             1001 #> 62        b                2               6     Bonpl              354 #> 63        c                1               4     Bonpl             1001 #> 64        d                6               1     Bonpl              354 #> 65        e                9               6     Bonpl             1001 #> 66        f                9               9     Bonpl              354 #> 67        g                1               6     Bonpl             1001 #> 68        h                4               9     Bonpl              354 #> 69        i                5               9     Bonpl             1001 #> 70        j                9               1     Bonpl              354 #> 71        a                6              10     Bonpl             1001 #> 72        b                5               3     Bonpl              354 #> 73        c                2               9     Bonpl             1001 #> 74        d                3               1     Bonpl              354 #> 75        e                2               7     Bonpl             1001 #> 76        f                5              10     Bonpl              354 #> 77        g                3               7     Bonpl             1001 #> 78        h                9               3     Bonpl              354 #> 79        i                6               7     Bonpl             1001 #> 80        j               10               8     Bonpl              354 #> 81        a                8               1     Bonpl             1001 #> 82        b                8               3     Bonpl              354 #> 83        c                0               4     Bonpl             1001 #> 84        d               10               7     Bonpl              354 #> 86        f                2               7     Bonpl              354 #> 87        g                9               3     Bonpl             1001 #> 88        h                0               5     Bonpl              354 #> 89        i               10               3     Bonpl             1001 #> 90        j                9               7     Bonpl              354 #> 91        a                4               5     Bonpl             1001 #> 92        b                4               5     Bonpl              354 #> 93        c               10              10     Bonpl             1001 #> 94        d                6              10     Bonpl              354 #> 95        e                6               8     Bonpl             1001 #> 96        f                7               6     Bonpl              354 #> 97        g                4               6     Bonpl             1001 #> 99        i                5               3     Bonpl             1001 #> 100       j                1               3     Bonpl              354 #>     collection #> 1            K #> 2          WAG #> 3           FR #> 4            P #> 5            S #> 6            K #> 7          WAG #> 8           FR #> 9            P #> 10           S #> 11           K #> 12         WAG #> 13          FR #> 14           P #> 15           S #> 16           K #> 17         WAG #> 18          FR #> 19           P #> 20           S #> 21           K #> 22         WAG #> 23          FR #> 24           P #> 25           S #> 26           K #> 27         WAG #> 28          FR #> 29           P #> 30           S #> 31           K #> 32         WAG #> 33          FR #> 34           P #> 35           S #> 36           K #> 37         WAG #> 38          FR #> 39           P #> 40           S #> 41           K #> 43          FR #> 44           P #> 45           S #> 46           K #> 47         WAG #> 48          FR #> 49           P #> 50           S #> 51           K #> 52         WAG #> 53          FR #> 54           P #> 55           S #> 56           K #> 57         WAG #> 58          FR #> 59           P #> 60           S #> 61           K #> 62         WAG #> 63          FR #> 64           P #> 65           S #> 66           K #> 67         WAG #> 68          FR #> 69           P #> 70           S #> 71           K #> 72         WAG #> 73          FR #> 74           P #> 75           S #> 76           K #> 77         WAG #> 78          FR #> 79           P #> 80           S #> 81           K #> 82         WAG #> 83          FR #> 84           P #> 86           K #> 87         WAG #> 88          FR #> 89           P #> 90           S #> 91           K #> 92         WAG #> 93          FR #> 94           P #> 95           S #> 96           K #> 97         WAG #> 99           P #> 100          S"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_equ.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Records with Identical lat/lon — cc_equ","title":"Identify Records with Identical lat/lon — cc_equ","text":"Removes flags records equal latitude longitude coordinates, either exact absolute. Equal coordinates can often indicate data entry errors.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_equ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Records with Identical lat/lon — cc_equ","text":"","code":"cc_equ(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   test = \"absolute\",   value = \"clean\",   verbose = TRUE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_equ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Records with Identical lat/lon — cc_equ","text":"x data.frame. Containing geographical coordinates species names. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. test character string. Defines coordinates compared exactly (“identical”) absolute scale (.e. -1 = 1, “absolute”). Default “absolute”. value character string.  Defining output value. See value. verbose logical. TRUE reports name test number records flagged.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_equ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Records with Identical lat/lon — cc_equ","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_equ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Records with Identical lat/lon — cc_equ","text":"","code":"x <- data.frame(species = letters[1:10],                  decimalLongitude = runif(100, -180, 180),                  decimalLatitude = runif(100, -90,90))  cc_equ(x) #> Testing equal lat/lon #> Removed 0 records. #>     species decimalLongitude decimalLatitude #> 1         a      -47.0750153      24.9990719 #> 2         b     -134.4000298       0.6111147 #> 3         c       86.3541020     -44.9058133 #> 4         d      164.1118629      86.2260794 #> 5         e       60.7228209      28.1843248 #> 6         f      -11.4878344     -73.8271978 #> 7         g       13.7492808      23.4977275 #> 8         h      -60.8566673      67.8181791 #> 9         i       46.3255588      77.4506764 #> 10        j      -17.0811102     -14.4925465 #> 11        a      139.6854639      -0.7992234 #> 12        b      102.3126551     -26.5131555 #> 13        c     -130.2985617     -45.2277239 #> 14        d      -78.7272985      82.5710218 #> 15        e       74.5007393     -25.2071779 #> 16        f      -20.8127087     -54.1824765 #> 17        g       63.9714683      40.7313571 #> 18        h       72.2573948     -59.7361589 #> 19        i     -155.3736890     -49.2333607 #> 20        j      165.0612674      62.1972099 #> 21        a      -91.9859324     -27.7463518 #> 22        b      153.4620005     -77.8824309 #> 23        c        0.9889476     -85.1364983 #> 24        d      156.7861711     -68.7519775 #> 25        e      -22.0321323     -87.5348337 #> 26        f      -53.8248468      42.4312863 #> 27        g       -8.4585282      76.3129378 #> 28        h      167.8174290      86.7943078 #> 29        i      -73.0217063     -17.0513633 #> 30        j      -75.3666090     -41.4549660 #> 31        a      129.5000091      -2.1080429 #> 32        b     -110.4074399     -80.8087585 #> 33        c      111.2790137     -89.5541706 #> 34        d      -48.4248555      -0.7497585 #> 35        e      -89.0281249     -46.1175690 #> 36        f      128.1891650     -43.9651334 #> 37        g     -133.1912270       9.4173799 #> 38        h      105.0867578     -44.7160269 #> 39        i      -51.8754563      23.1210300 #> 40        j      167.1637816     -33.0992088 #> 41        a     -137.2740447      76.4136706 #> 42        b      -15.0621662      73.1685060 #> 43        c        8.5141572     -73.4454368 #> 44        d      121.3422213      42.8031274 #> 45        e     -167.9385465      12.5532972 #> 46        f     -164.4017618      35.3679436 #> 47        g      105.1570600      36.1381506 #> 48        h     -107.0283727     -82.8106821 #> 49        i     -155.2336387     -12.3259673 #> 50        j      131.1987864      56.5616458 #> 51        a     -152.2476506      11.9855299 #> 52        b      -24.8387693      15.8844911 #> 53        c      170.5041209      68.4556258 #> 54        d       25.5446438      39.4772334 #> 55        e       91.5863924      78.5572008 #> 56        f      -92.7164415     -12.7023095 #> 57        g       45.7768317     -38.4862814 #> 58        h     -119.3707429      48.7157730 #> 59        i      -19.8757321      20.9697546 #> 60        j     -120.7169157     -61.3305454 #> 61        a     -137.4203581     -17.7123590 #> 62        b      -47.7128194     -89.7036320 #> 63        c      160.7612058     -14.7661136 #> 64        d      135.1478748      47.5081849 #> 65        e      -86.3787915      53.0059800 #> 66        f       56.6274374     -46.3343363 #> 67        g     -136.1287348      46.6507717 #> 68        h      -65.2147060     -84.7612524 #> 69        i       44.3019709     -11.2786591 #> 70        j      -19.0809251       5.4737077 #> 71        a       74.9856405     -12.6303568 #> 72        b      140.4104400      55.6734526 #> 73        c     -142.4496586      76.0616313 #> 74        d       46.9482188      31.5042252 #> 75        e      122.9612078     -73.0857253 #> 76        f      -48.8655247     -54.4566029 #> 77        g       44.2522001      -4.4018774 #> 78        h      -14.1308949      38.5868942 #> 79        i     -121.1715794       6.8542712 #> 80        j        4.9920703      67.5689419 #> 81        a     -128.4240822     -37.1546257 #> 82        b       54.1075323     -49.5422230 #> 83        c     -124.0939688      34.3652096 #> 84        d        2.9915504     -33.7807071 #> 85        e     -149.0866400      -3.0063279 #> 86        f        1.0895987     -68.0766048 #> 87        g     -166.1141220      34.2013023 #> 88        h      116.6518358     -33.1683472 #> 89        i      -77.0451933      56.9137829 #> 90        j      -91.1696878       8.2647789 #> 91        a      -36.7223061      80.5170931 #> 92        b       47.5534351     -83.0652468 #> 93        c      161.4883843      26.5758978 #> 94        d      -57.5570722     -75.6685780 #> 95        e       45.8517548     -12.0724615 #> 96        f      116.9695422      46.9607641 #> 97        g     -127.7584643     -37.1234088 #> 98        h      168.1700870     -70.6802593 #> 99        i     -149.0259637     -76.8610005 #> 100       j      -93.4339555     -25.8633761 cc_equ(x, value = \"flagged\") #> Testing equal lat/lon #> Flagged 0 records},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_gbif.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Records Assigned to GBIF Headquarters — cc_gbif","title":"Identify Records Assigned to GBIF Headquarters — cc_gbif","text":"Removes flags records within 0.5 degree radius around GBIF headquarters Copenhagen, DK.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_gbif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Records Assigned to GBIF Headquarters — cc_gbif","text":"","code":"cc_gbif(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   species = \"species\",   buffer = 1000,   geod = TRUE,   verify = FALSE,   value = \"clean\",   verbose = TRUE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_gbif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Records Assigned to GBIF Headquarters — cc_gbif","text":"x data.frame. Containing geographical coordinates species names. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. species character string. column species identity. required verify = TRUE. buffer numerical. buffer around GBIF headquarters, records flagged problematic. Units depend geod. Default = 100 m. geod logical. TRUE radius calculated based sphere, buffer meters. FALSE radius calculated degrees. Default = T. verify logical. TRUE records flagged record given species flagged close given reference. FALSE, distance criterion value character string.  Defining output value. See value. verbose logical. TRUE reports name test number records flagged.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_gbif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Records Assigned to GBIF Headquarters — cc_gbif","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_gbif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Records Assigned to GBIF Headquarters — cc_gbif","text":"recommended working records Denmark Copenhagen area.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_gbif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Records Assigned to GBIF Headquarters — cc_gbif","text":"","code":"x <- data.frame(species = \"A\",                  decimalLongitude = c(12.58, 12.58),                  decimalLatitude = c(55.67, 30.00))                  cc_gbif(x) #> Testing GBIF headquarters, flagging records around Copenhagen #> Removed 1 records. #>   species decimalLongitude decimalLatitude #> 2       A            12.58              30 cc_gbif(x, value = \"flagged\") #> Testing GBIF headquarters, flagging records around Copenhagen #> Flagged 1 records. #> [1] FALSE  TRUE"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_inst.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Records in the Vicinity of Biodiversity Institutions — cc_inst","title":"Identify Records in the Vicinity of Biodiversity Institutions — cc_inst","text":"Removes flags records assigned location zoos, botanical gardens, herbaria, universities museums, based global database ~10,000 biodiversity institutions. Coordinates locations can related data-entry errors, false automated geo-reference individuals captivity/horticulture.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_inst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Records in the Vicinity of Biodiversity Institutions — cc_inst","text":"","code":"cc_inst(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   species = \"species\",   buffer = 100,   geod = FALSE,   ref = NULL,   verify = FALSE,   verify_mltpl = 10,   value = \"clean\",   verbose = TRUE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_inst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Records in the Vicinity of Biodiversity Institutions — cc_inst","text":"x data.frame. Containing geographical coordinates species names. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. species character string. column species identity. required verify = TRUE. buffer numerical. buffer around institution, records flagged problematic, decimal degrees.  Default = 100m. geod logical. TRUE radius around capital calculated based sphere, buffer meters independent latitude. FALSE radius calculated assuming planar coordinates varies slightly latitude. Default = TRUE. See https://seethedatablog.wordpress.com/ detail credits. ref SpatVector (geometry: polygons). Providing geographic gazetteer. Can SpatVector (geometry: polygons), structure must identical institutions.  Default = institutions verify logical. TRUE, records close institutions flagged, records species greater vicinity (radius buffer * verify_mltpl). verify_mltpl numerical. indicates factor radius verify exceeds radius initial test. Default = 10, might suitable geod TRUE, might large otherwise. value character string.  Defining output value. See value. verbose logical. TRUE reports name test number records flagged.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_inst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Records in the Vicinity of Biodiversity Institutions — cc_inst","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_inst.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Records in the Vicinity of Biodiversity Institutions — cc_inst","text":"Note: buffer radius degrees, thus differ slightly different latitudes.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_inst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Records in the Vicinity of Biodiversity Institutions — cc_inst","text":"","code":"x <- data.frame(species = letters[1:10],                 decimalLongitude = c(runif(99, -180, 180), 37.577800),                 decimalLatitude = c(runif(99, -90,90), 55.710800))  #large buffer for demonstration, using geod = FALSE for shorter runtime cc_inst(x, value = \"flagged\", buffer = 10, geod = FALSE) #> Testing biodiversity institutions #> Flagged 1 records. #>   [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [37]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [49]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [61]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [73]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [85]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [97]  TRUE  TRUE  TRUE FALSE  if (FALSE) { #' cc_inst(x, value = \"flagged\", buffer = 50000) #geod = T }"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_iucn.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Records Outside Natural Ranges — cc_iucn","title":"Identify Records Outside Natural Ranges — cc_iucn","text":"Removes flags records outside provided natural range polygon, per species basis.  Expects one entry per species. See example  https://www.iucnredlist.org/resources/spatial-data-download  required polygon structure.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_iucn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Records Outside Natural Ranges — cc_iucn","text":"","code":"cc_iucn(   x,   range,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   species = \"species\",   buffer = 0,   value = \"clean\",   verbose = TRUE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_iucn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Records Outside Natural Ranges — cc_iucn","text":"x data.frame. Containing geographical coordinates species names. range SpatVector natural ranges species x.  Must contain column named indicated species. See details. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. species character string. column species name.  Default = “species”. buffer numerical. buffer around species' range, records flagged problematic, meters. Default = 0. value character string.  Defining output value. See value. verbose logical. TRUE reports name test number records flagged.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_iucn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Records Outside Natural Ranges — cc_iucn","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_iucn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Records Outside Natural Ranges — cc_iucn","text":"Download natural range maps suitable format amphibians, birds, mammals reptiles https://www.iucnredlist.org/resources/spatial-data-download. Note: buffer radius degrees, thus differ slightly different latitudes.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_iucn.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify Records Outside Natural Ranges — cc_iucn","text":"See https://ropensci.github.io/CoordinateCleaner/ details tutorials.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_iucn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Records Outside Natural Ranges — cc_iucn","text":"","code":"library(terra) #> terra 1.7.71  x <- data.frame(species = c(\"A\", \"B\"), decimalLongitude = runif(100, -170, 170), decimalLatitude = runif(100, -80,80))  range_species_A <- cbind(c(-45,-45,-60,-60,-45), c(-10,-25,-25,-10,-10)) rangeA <- terra::vect(range_species_A, \"polygons\") range_species_B <- cbind(c(15,15,32,32,15), c(10,-10,-10,10,10)) rangeB <- terra::vect(range_species_B, \"polygons\") range <- terra::vect(list(rangeA, rangeB)) range$binomial <- c(\"A\", \"B\")  cc_iucn(x = x, range = range, buffer = 0) #> Testing natural ranges #> Warning: no projection information for reference found,  #>               assuming '+proj=longlat +datum=WGS84 +no_defs' #> Removed 100 records. #> [1] species          decimalLongitude decimalLatitude  #> <0 rows> (or 0-length row.names)"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_outl.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Geographic Outliers in Species Distributions — cc_outl","title":"Identify Geographic Outliers in Species Distributions — cc_outl","text":"Removes flags records outliers geographic space according method defined via method argument. Geographic outliers often represent erroneous coordinates, example due data entry errors, imprecise geo-references, individuals horticulture/captivity.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_outl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Geographic Outliers in Species Distributions — cc_outl","text":"","code":"cc_outl(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   species = \"species\",   method = \"quantile\",   mltpl = 5,   tdi = 1000,   value = \"clean\",   sampling_thresh = 0,   verbose = TRUE,   min_occs = 7,   thinning = FALSE,   thinning_res = 0.5 )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_outl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Geographic Outliers in Species Distributions — cc_outl","text":"x data.frame. Containing geographical coordinates species names. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. species character string. column species name. Default = “species”. method character string.  Defining method outlier selection. See details. One “distance”, “quantile”, “mad”. Default = “quantile”. mltpl numeric. multiplier interquartile range (method == 'quantile') median absolute deviation (method == 'mad')identify outliers. See details.  Default = 5. tdi numeric.  minimum absolute distance (method == 'distance') record records species identified outlier, km. See details. Default = 1000. value character string.  Defining output value. See value. sampling_thresh numeric. Cut threshold sampling correction. Indicates quantile sampling outliers ignored. instance, sampling_thresh == 0.25, records 25 (sampling correction). verbose logical. TRUE reports name test number records flagged. min_occs Minimum number geographically unique datapoints needed species tested. necessary reliable outlier estimation. Species fewer min_occs records tested output value 'TRUE'. Default 7. method == 'distance', consider lower threshold. thinning forces raster approximation distance calculation. routinely used species 10,000 records computational reasons, can enforced smaller datasets, recommended sampling uneven. thinning_res resolution spatial thinning decimal degrees. Default = 0.5.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_outl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Geographic Outliers in Species Distributions — cc_outl","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_outl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Geographic Outliers in Species Distributions — cc_outl","text":"method outlier identification depends method argument. “quantile”: boxplot method used records flagged outliers mean distance records species larger mltpl * interquartile range mean distance records species. “mad”: median absolute deviation used. case record flagged outlier, mean distance records species larger median mean distance points plus/minus mad mean distances records species * mltpl. “distance”: records flagged outliers, minimum distance next record species > tdi. species records > 10000 unique locations random sample 1000 records used distance matrix calculation. test skips species fewer min_occs, geographically unique records. likelihood occurrence records erroneous outliers linked sampling effort given location. account , sampling_cor option fetches number occurrence records available www.gbif.org, per country proxy sampling effort. outlier test (mean distance) records weighted log transformed number records per square kilometre country. See https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/2041-210X.13152 example explanation outlier test.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_outl.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify Geographic Outliers in Species Distributions — cc_outl","text":"See https://ropensci.github.io/CoordinateCleaner/   details tutorials.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_outl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Geographic Outliers in Species Distributions — cc_outl","text":"","code":"x <- data.frame(species = letters[1:10],                 decimalLongitude = runif(100, -180, 180),                 decimalLatitude = runif(100, -90,90))  cc_outl(x) #> Testing geographic outliers #> Removed 0 records. #>     species decimalLongitude decimalLatitude #> 1         a       141.907373      41.7730578 #> 2         b      -100.689707     -16.3607806 #> 3         c       -75.025282      23.5544050 #> 4         d       112.643550     -78.2199030 #> 5         e      -164.303161     -63.2354127 #> 6         f         1.897799     -39.6536823 #> 7         g       -93.003883      63.1182257 #> 8         h        32.091271     -86.1226595 #> 9         i       169.610605     -44.4906216 #> 10        j       -96.220439      28.2080702 #> 11        a       132.270486      52.0468937 #> 12        b      -140.125773      37.5922166 #> 13        c       108.537041     -78.3732614 #> 14        d        56.852804       2.0360419 #> 15        e        54.739547     -53.8328970 #> 16        f       -98.523848      56.5408067 #> 17        g       127.432667      27.6804137 #> 18        h       -23.181466     -26.4146432 #> 19        i       -75.858575      17.3870813 #> 20        j        49.530481      40.9867872 #> 21        a       -84.765795      89.2023371 #> 22        b       -40.943384      -0.3500511 #> 23        c        42.909829     -48.5469415 #> 24        d        15.004110     -35.7742237 #> 25        e        -5.460840      39.6840018 #> 26        f        95.146171     -42.9470247 #> 27        g       165.969697     -70.6146573 #> 28        h       -82.589568     -42.7639118 #> 29        i        83.016080     -56.3928870 #> 30        j      -131.700403       7.6395023 #> 31        a      -162.576638     -78.2066746 #> 32        b        73.298545      68.4693246 #> 33        c      -127.003034     -39.7417433 #> 34        d        96.895920      31.0866609 #> 35        e      -116.513960     -79.1764427 #> 36        f      -140.126760      87.9273990 #> 37        g       157.803267     -39.1904224 #> 38        h       124.729610       9.7402260 #> 39        i        25.611689      70.2151208 #> 40        j        64.473626     -85.8956301 #> 41        a      -147.843992      31.9839217 #> 42        b       102.734685     -29.3292366 #> 43        c       -98.295319     -64.5847030 #> 44        d       -18.655753     -26.5384822 #> 45        e      -121.958051     -17.7399258 #> 46        f      -116.599792      70.0045834 #> 47        g      -108.637876     -33.7294462 #> 48        h       -51.259927     -78.9021525 #> 49        i      -114.720047      32.3075275 #> 50        j        22.012150     -21.9307376 #> 51        a        57.269883      15.9066627 #> 52        b        57.691227      -1.4438637 #> 53        c      -179.135716     -38.5601501 #> 54        d       177.640572     -88.4844729 #> 55        e        45.896123       9.1393735 #> 56        f      -174.733079      56.3815634 #> 57        g      -106.135842      25.8434254 #> 58        h        58.707599     -77.5688395 #> 59        i       -13.052149      41.1689289 #> 60        j       -50.274663      30.9800157 #> 61        a        68.171901      57.5641784 #> 62        b       -86.810116      74.6318804 #> 63        c       126.433812      34.1947225 #> 64        d        -7.198311      -1.4439955 #> 65        e        13.415900      26.4471571 #> 66        f        58.190363      -7.8273078 #> 67        g       -71.692376     -67.4196081 #> 68        h       -85.139454      18.7856953 #> 69        i       -70.183393      58.8288125 #> 70        j       134.984976      21.4880852 #> 71        a        78.637398      61.3896679 #> 72        b       -33.508910     -13.0956106 #> 73        c      -173.030590      48.4716067 #> 74        d      -161.935071      38.1853424 #> 75        e        72.810372     -78.5939025 #> 76        f      -156.106703     -13.3190575 #> 77        g      -166.992347     -74.1100242 #> 78        h      -172.744670     -52.5029725 #> 79        i       -45.798805     -48.9130428 #> 80        j       -98.760455     -80.9204141 #> 81        a        -2.909484      11.1278254 #> 82        b       -19.207744      34.9643060 #> 83        c        68.473764     -48.9703222 #> 84        d       123.386393      82.8564489 #> 85        e       -44.699880      -1.2893056 #> 86        f       174.560288      40.1775634 #> 87        g       162.873479      -1.5546451 #> 88        h       176.363463      62.1639146 #> 89        i       -20.473792     -85.4802606 #> 90        j      -124.645013       8.7120437 #> 91        a       160.101836      81.9818670 #> 92        b         7.007909     -64.7096640 #> 93        c       -15.971542      37.8492525 #> 94        d      -100.767528     -67.2476600 #> 95        e      -129.894342      60.4181300 #> 96        f      -102.183163     -36.3276893 #> 97        g       -33.955678     -21.3608250 #> 98        h       -95.855547     -45.3871196 #> 99        i      -170.976111     -27.9033031 #> 100       j        90.843105     -14.4389833 cc_outl(x, method = \"quantile\", value = \"flagged\") #> Testing geographic outliers #> Flagged 0 recordscc_outl(x, method = \"distance\", value = \"flagged\", tdi = 10000) #> Testing geographic outliers #> Flagged 1 recordscc_outl(x, method = \"distance\", value = \"flagged\", tdi = 1000) #> Testing geographic outliers #> Flagged 92 records},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_sea.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Non-terrestrial Coordinates — cc_sea","title":"Identify Non-terrestrial Coordinates — cc_sea","text":"Removes flags coordinates outside reference landmass. Can used restrict datasets terrestrial taxa, exclude records open ocean, depending reference (see details). Often records terrestrial taxa can found open ocean, mostly due switched latitude longitude.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_sea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Non-terrestrial Coordinates — cc_sea","text":"","code":"cc_sea(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   ref = NULL,   scale = 110,   value = \"clean\",   speedup = TRUE,   verbose = TRUE,   buffer = NULL )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_sea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Non-terrestrial Coordinates — cc_sea","text":"x data.frame. Containing geographical coordinates species names. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. ref SpatVector (geometry: polygons). Providing geographic gazetteer. Can SpatVector (geometry: polygons), structure must identical rnaturalearth::ne_download(scale = 110, type = 'land', category = 'physical', returnclass = 'sf'). Default = rnaturalearth::ne_download(scale = 110, type = 'land', category = 'physical', returnclass = 'sf'). scale scale default reference, downloaded natural earth. Must one 10, 50, 110. Higher numbers equal higher detail. Default = 110. value character string.  Defining output value. See value. speedup logical. Using heuristic speed analysis large data sets many records per location. verbose logical. TRUE reports name test number records flagged. buffer numeric. Units meters. provided, buffer created around sea polygon, ref provided.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_sea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Non-terrestrial Coordinates — cc_sea","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_sea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Non-terrestrial Coordinates — cc_sea","text":"cases flagging records close coastline recommendable, low precision reference dataset, minor GPS imprecision dataset might include coast marshland species. want flag records open ocean, consider using buffered landmass reference, e.g.: buffland.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_sea.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify Non-terrestrial Coordinates — cc_sea","text":"See https://ropensci.github.io/CoordinateCleaner/   details tutorials.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_sea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Non-terrestrial Coordinates — cc_sea","text":"","code":"x <- data.frame(species = letters[1:10],                  decimalLongitude = runif(10, -30, 30),                  decimalLatitude = runif(10, -30, 30))                  cc_sea(x, value = \"flagged\") #> Testing sea coordinates #> Reading layer `ne_110m_land' from data source `/tmp/RtmpS1I95h/ne_110m_land.shp' using driver `ESRI Shapefile' #> Simple feature collection with 127 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -180 ymin: -90 xmax: 180 ymax: 83.64513 #> Geodetic CRS:  WGS 84 #> Flagged 6 records. #>  [1] FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_urb.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Records Inside Urban Areas — cc_urb","title":"Identify Records Inside Urban Areas — cc_urb","text":"Removes flags records inside urban areas, based geographic gazetteer. Often records large databases span substantial time periods (centuries) old records might represent habitats today replaced city area.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_urb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Records Inside Urban Areas — cc_urb","text":"","code":"cc_urb(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   ref = NULL,   value = \"clean\",   verbose = TRUE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_urb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Records Inside Urban Areas — cc_urb","text":"x data.frame. Containing geographical coordinates species names. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. ref SpatVector. Providing geographic gazetteer urban areas. See details. default rnaturalearth::ne_download(scale = 'medium', type = 'urban_areas', returnclass = \"sf\"). Can SpatVector, structure must identical rnaturalearth::ne_download(). value character string.  Defining output value. See value. verbose logical. TRUE reports name test number records flagged.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_urb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Records Inside Urban Areas — cc_urb","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_urb.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify Records Inside Urban Areas — cc_urb","text":"See https://ropensci.github.io/CoordinateCleaner/   details tutorials.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_urb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Records Inside Urban Areas — cc_urb","text":"","code":"if (FALSE) { x <- data.frame(species = letters[1:10],                 decimalLongitude = runif(100, -180, 180),                 decimalLatitude = runif(100, -90,90))  cc_urb(x) cc_urb(x, value = \"flagged\") }"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_val.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Invalid lat/lon Coordinates — cc_val","title":"Identify Invalid lat/lon Coordinates — cc_val","text":"Removes flags non-numeric available coordinates well lat >90, lat <-90, lon > 180 lon < -180 flagged.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_val.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Invalid lat/lon Coordinates — cc_val","text":"","code":"cc_val(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   value = \"clean\",   verbose = TRUE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_val.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Invalid lat/lon Coordinates — cc_val","text":"x data.frame. Containing geographical coordinates species names. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. value character string.  Defining output value. See value. verbose logical. TRUE reports name test number records flagged.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_val.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Invalid lat/lon Coordinates — cc_val","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_val.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Invalid lat/lon Coordinates — cc_val","text":"test obligatory running tests CoordinateCleaner, additional tests run valid coordinates.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_val.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify Invalid lat/lon Coordinates — cc_val","text":"See https://ropensci.github.io/CoordinateCleaner/ details tutorials.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_val.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Invalid lat/lon Coordinates — cc_val","text":"","code":"x <- data.frame(species = letters[1:10],                  decimalLongitude = c(runif(106, -180, 180), NA, \"13W33'\", \"67,09\", 305),                  decimalLatitude = runif(110, -90,90))                  cc_val(x) #> Testing coordinate validity #> Removed 4 records. #>     species decimalLongitude decimalLatitude #> 1         a      -109.950343      77.1032266 #> 2         b      -103.494926     -15.5801781 #> 3         c       -90.421157     -66.4254207 #> 4         d        89.281369     -78.9906592 #> 5         e       -33.392246      69.4932971 #> 6         f        22.202571      16.5975311 #> 7         g        90.183510      40.0341934 #> 8         h        18.431196       2.2307398 #> 9         i        -9.594151     -36.7076425 #> 10        j      -157.453247      25.1600522 #> 11        a      -146.179423      68.8578171 #> 12        b        28.865743      80.3071315 #> 13        c       -41.156686      37.6950017 #> 14        d       -94.852476      76.2517037 #> 15        e         7.033548     -87.0801135 #> 16        f        50.835575     -59.1339080 #> 17        g       118.764086     -51.4818424 #> 18        h       150.873894      62.1207341 #> 19        i       154.584055     -46.2020919 #> 20        j        52.312948       2.7090638 #> 21        a       101.922340      65.3737483 #> 22        b      -158.862254     -82.6994383 #> 23        c       -50.989852      -7.1949194 #> 24        d        -7.421025     -60.1191273 #> 25        e        80.313036      74.7691811 #> 26        f        70.704972     -16.3037118 #> 27        g       133.455800      25.2957921 #> 28        h        75.170108     -60.3326858 #> 29        i       -52.270031     -57.4235737 #> 30        j       110.610979      89.3614883 #> 31        a       -52.996008      26.1199695 #> 32        b        91.125391      75.2577151 #> 33        c       146.934390      53.1117802 #> 34        d       -23.261325      74.3574753 #> 35        e      -100.711030     -19.6992751 #> 36        f      -166.614406     -25.6679112 #> 37        g        71.299467      20.5850932 #> 38        h      -126.059755     -55.3606657 #> 39        i        15.277541     -77.0690705 #> 40        j       106.838051     -34.8780713 #> 41        a        79.064881     -58.5762579 #> 42        b        82.148276      69.7970023 #> 43        c      -162.786182      -0.3873195 #> 44        d       -17.504743      34.9034565 #> 45        e       105.937185      67.3588848 #> 46        f       116.864037     -86.7443806 #> 47        g      -104.741437     -21.2423301 #> 48        h      -119.445648       2.4467444 #> 49        i       172.898721     -81.4999213 #> 50        j        36.241203      54.5571198 #> 51        a      -125.396532      24.1356481 #> 52        b       -74.614076      48.8390785 #> 53        c       -18.698176       0.3174737 #> 54        d       116.606817      38.0319774 #> 55        e       168.985559     -73.4582906 #> 56        f       -73.652701     -70.9364206 #> 57        g       -96.231693     -49.5155013 #> 58        h       -62.826826     -14.8205604 #> 59        i      -143.866037     -28.0776478 #> 60        j       -61.118870      29.5570722 #> 61        a      -110.664467     -10.1945391 #> 62        b       -83.205491     -34.8869588 #> 63        c       138.070564     -41.5177188 #> 64        d        61.424338     -41.3232129 #> 65        e      -153.244416     -72.4158625 #> 66        f        66.711313      88.5707913 #> 67        g        36.293613     -71.1852230 #> 68        h        74.210571     -11.7920771 #> 69        i       -11.460236      33.2437627 #> 70        j      -176.044344     -30.6321259 #> 71        a       101.986450     -18.0823157 #> 72        b        43.867187      35.8481775 #> 73        c       131.781146     -46.3458405 #> 74        d       151.146841     -85.0436852 #> 75        e       -62.856387     -77.3837960 #> 76        f       149.674344     -85.7334102 #> 77        g      -151.003833     -52.8118012 #> 78        h       127.986365      35.7995378 #> 79        i       -70.189568      86.6490413 #> 80        j        85.090695      50.6972844 #> 81        a       158.746525      18.9854229 #> 82        b       129.968365     -52.4948922 #> 83        c       -48.898756      47.4621290 #> 84        d       148.508454      57.3814794 #> 85        e        91.051993      47.0002157 #> 86        f        50.933667      59.1528817 #> 87        g       106.362119     -88.4683279 #> 88        h       174.589821     -74.0121775 #> 89        i        44.052926      75.5784225 #> 90        j        19.917535      24.9113612 #> 91        a       165.983941     -14.9425643 #> 92        b       149.630298      36.3663946 #> 93        c        37.179216     -61.0152975 #> 94        d       -67.840522     -21.9762296 #> 95        e        19.854765      85.5210270 #> 96        f       157.535188     -17.3600679 #> 97        g       -48.586625      40.2766736 #> 98        h       -58.092373     -20.6658217 #> 99        i        97.086082     -19.9640788 #> 100       j       -71.516771     -66.6644820 #> 101       a        46.670744     -38.7448736 #> 102       b       108.899901     -66.4660992 #> 103       c        15.204803      -4.6711850 #> 104       d        47.159124      86.4016542 #> 105       e      -111.676007     -59.6987217 #> 106       f      -106.757032     -57.3231120 cc_val(x, value = \"flagged\") #> Testing coordinate validity #> Flagged 4 records},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_zero.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Zero Coordinates — cc_zero","title":"Identify Zero Coordinates — cc_zero","text":"Removes flags records either zero longitude latitude radius around point zero longitude zero latitude. problems often due erroneous data-entry geo-referencing can lead typical patterns high diversity around equator.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_zero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Zero Coordinates — cc_zero","text":"","code":"cc_zero(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   buffer = 0.5,   value = \"clean\",   verbose = TRUE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_zero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Zero Coordinates — cc_zero","text":"x data.frame. Containing geographical coordinates species names. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. buffer numerical. buffer around 0/0 point, records flagged problematic, decimal degrees.  Default = 0.5. value character string.  Defining output value. See value. verbose logical. TRUE reports name test number records flagged.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_zero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Zero Coordinates — cc_zero","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_zero.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify Zero Coordinates — cc_zero","text":"See https://ropensci.github.io/CoordinateCleaner/ details tutorials.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cc_zero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Zero Coordinates — cc_zero","text":"","code":"x <- data.frame(species = \"A\",                  decimalLongitude = c(0,34.84, 0, 33.98),                  decimalLatitude = c(23.08, 0, 0, 15.98))                  cc_zero(x) #> Testing zero coordinates #> Removed 3 records. #>   species decimalLongitude decimalLatitude #> 4       A            33.98           15.98 cc_zero(x, value = \"flagged\") #> Testing zero coordinates #> Flagged 3 records. #> [1] FALSE FALSE FALSE  TRUE"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cd_ddmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Datasets with a Degree Conversion Error — cd_ddmm","title":"Identify Datasets with a Degree Conversion Error — cd_ddmm","text":"test flags datasets significant fraction records subject common degree minute decimal degree conversion error, degree sign recognized decimal delimiter.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cd_ddmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Datasets with a Degree Conversion Error — cd_ddmm","text":"","code":"cd_ddmm(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   ds = \"dataset\",   pvalue = 0.025,   diff = 1,   mat_size = 1000,   min_span = 2,   value = \"clean\",   verbose = TRUE,   diagnostic = FALSE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cd_ddmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Datasets with a Degree Conversion Error — cd_ddmm","text":"x data.frame. Containing geographical coordinates species names. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. ds character string. column dataset record. case x treated single dataset, identical records.  Default = “dataset”. pvalue numeric. p-value one-sided t-test flag test passed . ddmm.pvalue diff must met. Default = 0.025. diff numeric. threshold difference ddmm test. Indicates fraction records decimals 0.6 must outnumber records decimals 0.6. Default = 1 mat_size numeric. size matrix binomial test. Must changed decimals (e.g. 100, 1000, 10000). Adapt dataset size, generally 100 better datasets < 10000 records, 1000 better datasets 10000 - 1M records. Higher values also work reasonably well smaller datasets, therefore, default = 1000. large datasets try 10000. min_span numeric. minimum geographic extent datasets tested. Default = 2. value character string.  Defining output value. See value. verbose logical. TRUE reports name test number records flagged. diagnostic logical. TRUE plots analyses matrix dataset.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cd_ddmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Datasets with a Degree Conversion Error — cd_ddmm","text":"Depending ‘value’ argument, either data.frame summary statistics flags dataset (“dataset”) data.frame containing records considered correct test (“clean”) logical vector (“flags”), TRUE = test passed FALSE = test failed/potentially problematic. Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cd_ddmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Datasets with a Degree Conversion Error — cd_ddmm","text":"degree sign recognized decimal delimiter coordinate conversion, coordinate decimals 0.59 (59') possible. test uses binomial test test significant proportion records dataset subject problem. test best adjusted via diff argument. lower diff, stricter test. Also scales dataset size. Empirically, datasets < 5,000 unique coordinate records diff = 0.1 proven reasonable flagging datasets >25% problematic records dataset >50% problematic records. datasets 5,000 100,000 geographic unique records diff = 0.01 recommended, datasets 100,000 1 M records diff = 0.001, .","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cd_ddmm.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify Datasets with a Degree Conversion Error — cd_ddmm","text":"See https://ropensci.github.io/CoordinateCleaner/ details tutorials.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cd_ddmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Datasets with a Degree Conversion Error — cd_ddmm","text":"","code":"clean <- data.frame(species = letters[1:10],                  decimalLongitude = runif(100, -180, 180),                  decimalLatitude = runif(100, -90,90),                 dataset = \"FR\")                  cd_ddmm(x = clean, value = \"flagged\") #> Testing for dd.mm to dd.dd conversion errors #> Flagged 0 recordsproblematic dataset lon <- sample(0:180, size = 100, replace = TRUE) + runif(100, 0,0.59) lat <- sample(0:90, size = 100, replace = TRUE) + runif(100, 0,0.59)  prob <-  data.frame(species = letters[1:10],                  decimalLongitude = lon,                  decimalLatitude = lat,                 dataset = \"FR\")                  cd_ddmm(x = prob, value = \"flagged\") #> Testing for dd.mm to dd.dd conversion errors #> Flagged 100 records},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cd_round.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Datasets with Rasterized Coordinates — cd_round","title":"Identify Datasets with Rasterized Coordinates — cd_round","text":"Flags datasets periodicity patterns indicative rasterized (lattice) collection scheme, often obtain e.g. atlas data. Using combination autocorrelation sliding-window outlier detection identify periodicity patterns data. See  https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/2041-210X.13152 details  description algorithm","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cd_round.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Datasets with Rasterized Coordinates — cd_round","text":"","code":"cd_round(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   ds = \"dataset\",   T1 = 7,   reg_out_thresh = 2,   reg_dist_min = 0.1,   reg_dist_max = 2,   min_unique_ds_size = 4,   graphs = TRUE,   test = \"both\",   value = \"clean\",   verbose = TRUE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cd_round.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Datasets with Rasterized Coordinates — cd_round","text":"x data.frame. Containing geographical coordinates species names. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. ds character string. column dataset record. case x treated single dataset, identical records.  Default = “dataset”. T1 numeric.  threshold outlier detection interquantile range based test. major parameter specify sensitivity test: lower values, equal higher detection rate. Values 7-11 recommended. Default = 7. reg_out_thresh numeric. Threshold number equal distances outlier points.  See details.  Default = 2. reg_dist_min numeric.  minimum detection distance outliers degrees (minimum resolution grids flagged). Default = 0.1. reg_dist_max numeric.  maximum detection distance outliers degrees (maximum resolution grids flagged). Default = 2. min_unique_ds_size numeric.  minimum number unique locations (values tested column) datasets included test. Default = 4. graphs logical. TRUE, diagnostic plots produced.  Default = TRUE. test character string.  Indicates column test. Either “lat” latitude, “lon” longitude, “” .  latter case datasets flagged test failed. Default = “” value character string.  Defining output value. See value. verbose logical. TRUE reports name test number records flagged.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cd_round.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Datasets with Rasterized Coordinates — cd_round","text":"Depending ‘value’ argument, either data.frame summary statistics flags dataset (“dataset”) data.frame containing records considered correct test (“clean”) logical vector (“flagged”), TRUE = test passed FALSE = test failed/potentially problematic. Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cd_round.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify Datasets with Rasterized Coordinates — cd_round","text":"See https://ropensci.github.io/CoordinateCleaner/ details tutorials.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cd_round.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Datasets with Rasterized Coordinates — cd_round","text":"","code":"#simulate bias grid, one degree resolution, 10% error on a 1000 records dataset #simulate biased fraction of the data, grid resolution = 1 degree #simulate non-biased fraction of the data   bi <- sample(3 + 0:5, size = 100, replace = TRUE)   mu <- runif(3, 0, 15)   sig <- runif(3, 0.1, 5)   cl <- rnorm(n = 900, mean = mu, sd = sig)   lon <- c(cl, bi)      bi <- sample(9:13, size = 100, replace = TRUE)   mu <- runif(3, 0, 15)   sig <- runif(3, 0.1, 5)   cl <- rnorm(n = 900, mean = mu, sd = sig)   lat <- c(cl, bi)      #add biased data      inp <- data.frame(decimalLongitude = lon,                     decimalLatitude = lat,                     dataset = \"test\")                           #run test   if (FALSE) {   cd_round(inp, value = \"dataset\")   }"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Fossils with Outlier Age — cf_age","title":"Identify Fossils with Outlier Age — cf_age","text":"Removes flags records temporal outliers based interquantile ranges.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Fossils with Outlier Age — cf_age","text":"","code":"cf_age(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   min_age = \"min_ma\",   max_age = \"max_ma\",   taxon = \"accepted_name\",   method = \"quantile\",   size_thresh = 7,   mltpl = 5,   replicates = 5,   flag_thresh = 0.5,   uniq_loc = FALSE,   value = \"clean\",   verbose = TRUE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Fossils with Outlier Age — cf_age","text":"x data.frame. Containing fossil records taxon names, ages,  geographic coordinates. lon character string. column longitude coordinates. identify unique records uniq_loc  = TRUE. Default = “decimalLongitude”. lat character string. column longitude coordinates. Default = “decimalLatitude”. identify unique records uniq_loc  = T. min_age character string. column minimum age. Default = “min_ma”. max_age character string. column maximum age. Default = “max_ma”. taxon character string. column taxon name. “”, searches outliers entire dataset, otherwise per specified taxon. Default = “accepted_name”. method character string.  Defining method outlier selection.  See details. Either “quantile” “mad”.  Default = “quantile”. size_thresh numeric.  minimum number records needed dataset tested. Default = 10. mltpl numeric. multiplier interquartile range (method == 'quantile') median absolute deviation (method == 'mad') identify outliers. See details.  Default = 5. replicates numeric. number replications distance matrix calculation. See details.  Default = 5. flag_thresh numeric.  fraction passed replicates necessary pass test.  See details. Default = 0.5. uniq_loc logical.  TRUE single records per location time point (taxon taxon != \"\") used outlier testing. Default = T. value character string.  Defining output value. See value. verbose logical. TRUE reports name test number records flagged.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Fossils with Outlier Age — cf_age","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_age.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Fossils with Outlier Age — cf_age","text":"outlier detection based interquantile range test. temporal distance matrix among records calculated based single point selected random minimum maximum age record. mean distance point neighbours calculated sum distances tested interquantile range flagged outlier \\(x > IQR(x) + q_75 * mltpl\\). test replicated ‘replicates’ times, account dating uncertainty. Records flagged outliers flagged fraction ‘flag.thresh’ replicates. datasets/taxa comprising ‘size_thresh’ records tested. Distance calculated Euclidean distance.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_age.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify Fossils with Outlier Age — cf_age","text":"See https://ropensci.github.io/CoordinateCleaner/ details tutorials.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Fossils with Outlier Age — cf_age","text":"","code":"minages <- c(runif(n = 11, min = 10, max = 25), 62.5) x <- data.frame(species = c(letters[1:10], rep(\"z\", 2)),                 min_ma = minages,                 max_ma = c(minages[1:11] + runif(n = 11, min = 0, max = 5), 65))  cf_age(x, value = \"flagged\", taxon = \"\") #> Testing temporal outliers on dataset level #> Flagged 1 records. #>     1     2     3     4     5     6     7     8     9    10    11    12  #>  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE   # unique locations only x <- data.frame(species = c(letters[1:10], rep(\"z\", 2)),                 decimalLongitude = c(runif(n = 10, min = 4, max = 16), 75, 7),                 decimalLatitude = c(runif(n = 12, min = -5, max = 5)),                 min_ma = minages,                  max_ma = c(minages[1:11] + runif(n = 11, min = 0, max = 5), 65))  cf_age(x, value = \"flagged\", taxon = \"\", uniq_loc = TRUE) #> Testing temporal outliers on dataset level #> Flagged 1 records. #>     1     2     3     4     5     6     7     8     9    10    11    12  #>  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_equal.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Fossils with equal min and max age — cf_equal","title":"Identify Fossils with equal min and max age — cf_equal","text":"Removes flags records equal minimum maximum age.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Fossils with equal min and max age — cf_equal","text":"","code":"cf_equal(   x,   min_age = \"min_ma\",   max_age = \"max_ma\",   value = \"clean\",   verbose = TRUE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_equal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Fossils with equal min and max age — cf_equal","text":"x data.frame. Containing fossil records taxon names, ages,  geographic coordinates. min_age character string. column minimum age. Default = “min_ma”. max_age character string. column maximum age. Default = “max_ma”. value character string.  Defining output value. See value. verbose logical. TRUE reports name test number records flagged.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_equal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Fossils with equal min and max age — cf_equal","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_equal.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify Fossils with equal min and max age — cf_equal","text":"See https://ropensci.github.io/CoordinateCleaner/ details tutorials.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_equal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Fossils with equal min and max age — cf_equal","text":"","code":"minages <- runif(n = 10, min = 0.1, max = 25) x <- data.frame(species = letters[1:10],                  min_ma = minages,                  max_ma = minages + runif(n = 10, min = 0, max = 10)) x <- rbind(x, data.frame(species = \"z\",                  min_ma = 5,                  max_ma = 5))                  cf_equal(x, value = \"flagged\") #> Testing age validity #> Flagged 1 records. #>  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_outl.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Outlier Records in Space and Time — cf_outl","title":"Identify Outlier Records in Space and Time — cf_outl","text":"Removes flags records fossils spatio-temporal outliers based interquantile ranges. Records flagged either extreme time space, .","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_outl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Outlier Records in Space and Time — cf_outl","text":"","code":"cf_outl(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   min_age = \"min_ma\",   max_age = \"max_ma\",   taxon = \"accepted_name\",   method = \"quantile\",   size_thresh = 7,   mltpl = 5,   replicates = 5,   flag_thresh = 0.5,   uniq_loc = FALSE,   value = \"clean\",   verbose = TRUE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_outl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Outlier Records in Space and Time — cf_outl","text":"x data.frame. Containing fossil records taxon names, ages,  geographic coordinates. lon character string. column longitude coordinates. identify unique records uniq_loc  = TRUE. Default = “decimalLongitude”. lat character string. column longitude coordinates. Default = “decimalLatitude”. identify unique records uniq_loc  = T. min_age character string. column minimum age. Default = “min_ma”. max_age character string. column maximum age. Default = “max_ma”. taxon character string. column taxon name. “”, searches outliers entire dataset, otherwise per specified taxon. Default = “accepted_name”. method character string.  Defining method outlier selection.  See details. Either “quantile” “mad”.  Default = “quantile”. size_thresh numeric.  minimum number records needed dataset tested. Default = 10. mltpl numeric. multiplier interquartile range (method == 'quantile') median absolute deviation (method == 'mad') identify outliers. See details.  Default = 5. replicates numeric. number replications distance matrix calculation. See details.  Default = 5. flag_thresh numeric.  fraction passed replicates necessary pass test.  See details. Default = 0.5. uniq_loc logical.  TRUE single records per location time point (taxon taxon != \"\") used outlier testing. Default = T. value character string.  Defining output value. See value. verbose logical. TRUE reports name test number records flagged.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_outl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Outlier Records in Space and Time — cf_outl","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_outl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Outlier Records in Space and Time — cf_outl","text":"outlier detection based interquantile range test. first step distance matrix geographic distances among records calculate. Subsequently similar distance matrix temporal distances among records calculated based single point selected random minimum maximum age record. mean distance point neighbours calculated matrices spatial temporal distances scaled range. sum distanced tested interquantile range flagged outlier \\(x > IQR(x) + q_75 * mltpl\\). test replicated ‘replicates’ times, account temporal uncertainty. Records flagged outliers flagged fraction ‘flag.thres’ replicates. datasets/taxa comprising ‘size_thresh’ records tested. Note geographic distances calculated geospheric distances datasets (taxa) fewer 10,000 records approximated Euclidean distances datasets/taxa 10,000 25,000 records. Datasets/taxa comprising 25,000 records skipped.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_outl.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify Outlier Records in Space and Time — cf_outl","text":"See https://ropensci.github.io/CoordinateCleaner/ details tutorials.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_outl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Outlier Records in Space and Time — cf_outl","text":"","code":"minages <- c(runif(n = 11, min = 10, max = 25), 62.5) x <- data.frame(species = c(letters[1:10], rep(\"z\", 2)),                 lng = c(runif(n = 10, min = 4, max = 16), 75, 7),                 lat = c(runif(n = 12, min = -5, max = 5)),                 min_ma = minages,                  max_ma = c(minages[1:11] + runif(n = 11, min = 0, max = 5), 65))  cf_outl(x, value = \"flagged\", taxon = \"\") #> Testing spatio-temporal outliers on dataset level #> Warning: decimalLatitude not found. Using lat instead. #> Warning: decimalLongitude not found. Using lat instead. #> Flagged 2 records. #>     1     2     3     4     5     6     7     8     9    10    11    12  #>  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Fossils with Extreme Age Ranges — cf_range","title":"Identify Fossils with Extreme Age Ranges — cf_range","text":"Removes flags records unexpectedly large temporal range, based quantile outlier test.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Fossils with Extreme Age Ranges — cf_range","text":"","code":"cf_range(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   min_age = \"min_ma\",   max_age = \"max_ma\",   taxon = \"accepted_name\",   method = \"quantile\",   mltpl = 5,   size_thresh = 7,   max_range = 500,   uniq_loc = FALSE,   value = \"clean\",   verbose = TRUE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Fossils with Extreme Age Ranges — cf_range","text":"x data.frame. Containing fossil records taxon names, ages,  geographic coordinates. lon character string. column longitude coordinates. identify unique records uniq_loc  = TRUE. Default = “decimalLongitude”. lat character string. column longitude coordinates. Default = “decimalLatitude”. identify unique records uniq_loc  = T. min_age character string. column minimum age. Default = “min_ma”. max_age character string. column maximum age. Default = “max_ma”. taxon character string. column taxon name. “”, searches outliers entire dataset, otherwise per specified taxon. Default = “accepted_name”. method character string.  Defining method outlier selection.  See details. Either “quantile” “mad”.  Default = “quantile”. mltpl numeric. multiplier interquartile range (method == 'quantile') median absolute deviation (method == 'mad') identify outliers. See details.  Default = 5. size_thresh numeric.  minimum number records needed dataset tested. Default = 10. max_range numeric. absolute maximum time interval min age max age. relevant method = “time”. uniq_loc logical.  TRUE single records per location time point (taxon taxon != \"\") used outlier testing. Default = T. value character string.  Defining output value. See value. verbose logical. TRUE reports name test number records flagged.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Fossils with Extreme Age Ranges — cf_range","text":"Depending ‘value’ argument, either data.frame containing records considered correct test (“clean”)   logical vector (“flagged”), TRUE = test passed FALSE = test   failed/potentially problematic . Default = “clean”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_range.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify Fossils with Extreme Age Ranges — cf_range","text":"See https://ropensci.github.io/CoordinateCleaner/ details tutorials.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/cf_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Fossils with Extreme Age Ranges — cf_range","text":"","code":"minages <- runif(n = 11, min = 0.1, max = 25) x <- data.frame(species = c(letters[1:10], \"z\"),                 lng = c(runif(n = 9, min = 4, max = 16), 75, 7),                 lat = c(runif(n = 11, min = -5, max = 5)),                 min_ma = minages,                  max_ma = minages + c(runif(n = 10, min = 0, max = 5), 25))  cf_range(x, value = \"flagged\", taxon = \"\") #> Warning: lat not found. Using lng instead. #> Warning: lng not found. Using lng instead. #> Testing temporal range outliers on dataset level #> Flagged 1 records. #>  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Geographic Cleaning of Coordinates from Biologic Collections — clean_coordinates","title":"Geographic Cleaning of Coordinates from Biologic Collections — clean_coordinates","text":"Cleaning geographic coordinates multiple empirical tests flag potentially erroneous coordinates, addressing issues common biological collection databases.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geographic Cleaning of Coordinates from Biologic Collections — clean_coordinates","text":"","code":"clean_coordinates(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   species = \"species\",   countries = NULL,   tests = c(\"capitals\", \"centroids\", \"equal\", \"gbif\", \"institutions\", \"outliers\", \"seas\",     \"zeros\"),   capitals_rad = 10000,   centroids_rad = 1000,   centroids_detail = \"both\",   inst_rad = 100,   outliers_method = \"quantile\",   outliers_mtp = 5,   outliers_td = 1000,   outliers_size = 7,   range_rad = 0,   zeros_rad = 0.5,   capitals_ref = NULL,   centroids_ref = NULL,   country_ref = NULL,   country_refcol = \"iso_a3\",   country_buffer = NULL,   inst_ref = NULL,   range_ref = NULL,   seas_ref = NULL,   seas_scale = 50,   seas_buffer = NULL,   urban_ref = NULL,   aohi_rad = NULL,   value = \"spatialvalid\",   verbose = TRUE,   report = FALSE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_coordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geographic Cleaning of Coordinates from Biologic Collections — clean_coordinates","text":"x data.frame. Containing geographical coordinates species names. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. species character string. vector length rows x, species identity record.  NULL, tests must include \"outliers\" \"duplicates\" tests. countries character string. column country assignment record three letter ISO code. Default = “countrycode”. missing, countries test skipped. tests vector character strings, indicating tests run. See details tests available. Default = c(\"capitals\", \"centroids\", \"equal\", \"gbif\", \"institutions\", \"outliers\", \"seas\", \"zeros\") capitals_rad numeric. radius around capital coordinates meters. Default = 10000. centroids_rad numeric. radius around centroid coordinates meters. Default = 1000. centroids_detail character string. set ‘country’ country (adm-0) centroids tested, set ‘provinces’ province (adm-1) centroids tested.  Default = ‘’. inst_rad numeric. radius around biodiversity institutions coordinates metres. Default = 100. outliers_method method used outlier testing. See details. outliers_mtp numeric. multiplier interquartile range outlier test.  NULL outliers.td used.  Default = 5. outliers_td numeric.  minimum distance record records species identified outlier, km. Default = 1000. outliers_size numerical.  minimum number records dataset run taxon-specific outlier test.  Default = 7. range_rad buffer around natural ranges. Default = 0. zeros_rad numeric. radius around 0/0 degrees. Default = 0.5. capitals_ref data.frame alternative reference data country capitals test. missing, countryref dataset used. Alternatives must identical structure. centroids_ref data.frame alternative reference data centroid test. NULL, countryref dataset used. Alternatives must identical structure. country_ref SpatVector alternative reference countries test. NULL, rnaturalearth:ne_countries('medium', returnclass = \"sf\") dataset used. country_refcol column name reference dataset, containing relevant ISO codes matching. Default \"iso_a3_eh\" referes ISO-3 codes reference dataset. See notes. country_buffer numeric. Units meters. provided, buffer created around country polygon. inst_ref data.frame alternative reference data biodiversity institution test. NULL, institutions dataset used.  Alternatives must identical structure. range_ref SpatVector species natural ranges. Required include 'ranges' test. See cc_iucn details. seas_ref SpatVector alternative reference seas test. NULL, rnaturalearth::ne_download(scale = 110, type = 'land', category = 'physical', returnclass = \"sf\") dataset used. seas_scale scale default landmass reference. Must one 10, 50, 110. Higher numbers equal higher detail. Default = 50. seas_buffer numeric. Units meters. provided, buffer created around sea polygon. urban_ref SpatVector alternative reference urban test. NULL, test skipped. See details reference gazetteers. aohi_rad numeric. radius around aohi coordinates meters. Default = 1000. value character string defining output value. See value section details. one ‘spatialvalid’, ‘summary’, ‘clean’. Default = ‘spatialvalid’. verbose logical. TRUE reports name test number records flagged. report logical character.  TRUE report file written working directory, summarizing cleaning results. character, path file written.  Default = FALSE.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_coordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geographic Cleaning of Coordinates from Biologic Collections — clean_coordinates","text":"Depending output argument: “spatialvalid” object class spatialvalid similar x one column added test. TRUE = clean coordinate entry, FALSE = potentially problematic coordinate entries.  .summary column FALSE test flagged respective coordinate. “flagged” logical vector order input data summarizing results test. TRUE = clean coordinate, FALSE = potentially problematic (= least one test failed). “clean” data.frame similar x potentially problematic records removed","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_coordinates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geographic Cleaning of Coordinates from Biologic Collections — clean_coordinates","text":"function needs coordinates formally valid according WGS84. data contains invalid coordinates, function stop return vector flagging invalid records. TRUE = non-problematic coordinate, FALSE = potentially problematic coordinates. capitals tests radius around adm-0 capitals. radius capitals_rad. centroids tests radius around country centroids. radius centroids_rad. countries tests coordinates country indicated country column.  Switched default. duplicates tests duplicate records. checks identical coordinates species vector provided identical coordinates within species. first records flagged duplicates. Switched default. equal tests equal absolute longitude latitude. gbif tests one-degree radius around GBIF headquarters Copenhagen, Denmark. institutions tests radius around known biodiversity institutions instiutions. radius inst_rad. outliers tests species outlier records. Depending outliers_mtp outliers.td arguments either flags records minimum distance away records species (outliers_td) records outside multiple interquartile range minimum distances next neighbour species (outliers_mtp). Three different methods available outlier test: \"“outlier” boxplot method used records flagged outliers mean distance records species larger mltpl * interquartile range mean distance records species. “mad” median absolute deviation used. case record flagged outlier, mean distance records species larger median mean distance points plus/minus mad mean distances records species * mltpl. “distance” records flagged outliers, minimum distance next record species > tdi. ranges tests records fall within provided natural range polygons per species basis. See cc_iucn details. seas tests coordinates fall ocean. urban tests coordinates urban areas. Switched default validity checks coordinates correspond lat/lon coordinate reference system. test always , since records need pass test run. zeros tests plain zeros, equal latitude longitude radius around point 0/0. radius zeros.rad.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_coordinates.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Geographic Cleaning of Coordinates from Biologic Collections — clean_coordinates","text":"Always tests coordinate validity: non-numeric missing coordinates coordinates exceeding global extent (lon/lat, WGS84). See https://ropensci.github.io/CoordinateCleaner/ details tutorials. country_refcol argument allows adapt function structure alternative reference datasets. instance, rnaturalearth::ne_countries(scale = \"small\", returnclass = \"sf\"), default fail, country_refcol = \"iso_a3\" work.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_coordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geographic Cleaning of Coordinates from Biologic Collections — clean_coordinates","text":"","code":"exmpl <- data.frame(species = sample(letters, size = 250, replace = TRUE),                     decimalLongitude = runif(250, min = 42, max = 51),                     decimalLatitude = runif(250, min = -26, max = -11))  test <- clean_coordinates(x = exmpl,                            tests = c(\"equal\")) #> Testing coordinate validity #> Flagged 0 records. #> Testing equal lat/lon #> Flagged 0 records. #> Flagged 0 of 250 records, EQ = 0.                                      if (FALSE) { #run more tests test <- clean_coordinates(x = exmpl,                            tests = c(\"capitals\",                            \"centroids\",\"equal\",                            \"gbif\", \"institutions\",                            \"outliers\", \"seas\",                            \"zeros\")) }                                                                        summary(test) #>     .val     .equ .summary  #>        0        0        0"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Coordinate Cleaning using Dataset Properties — clean_dataset","title":"Coordinate Cleaning using Dataset Properties — clean_dataset","text":"Tests problems associated coordinate conversions rounding, based dataset properties. Includes test identify contributing datasets potential errors converting ddmm dd.dd, periodicity data decimals indicating rounding raster basis linked low coordinate precision. Specifically: ddmm  tests erroneous conversion degree minute format (ddmm) decimal degree (dd.dd) format periodicity test periodicity data, can indicate imprecise coordinates, due rounding rasterization.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coordinate Cleaning using Dataset Properties — clean_dataset","text":"","code":"clean_dataset(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   ds = \"dataset\",   tests = c(\"ddmm\", \"periodicity\"),   value = \"dataset\",   verbose = TRUE,   ... )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coordinate Cleaning using Dataset Properties — clean_dataset","text":"x data.frame. Containing geographical coordinates species names. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. ds character string. column dataset record. case x treated single dataset, identical records. Default = “dataset”. tests vector character strings, indicating tests run. See details tests available. Default = c(\"ddmm\", \"periodicity\") value character string.  Defining output value. See value. Default = “dataset”. verbose logical. TRUE reports name test number records flagged. ... additional arguments passed cd_ddmm cd_round customize test sensitivity.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coordinate Cleaning using Dataset Properties — clean_dataset","text":"Depending ‘value’ argument: “dataset” data.frame test summary statistics dataset x “clean” data.frame containing records datasets x passed tests “flagged” logical vector length rows x, TRUE = test passed FALSE = test failed/potentially problematic.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coordinate Cleaning using Dataset Properties — clean_dataset","text":"tests based statistical distribution coordinates decimals within datasets geographic distribution records identify datasets potential errors/biases. Three potential error sources can identified. ddmm flag tests particular pattern emerges geographical coordinates degree minute annotation transferred decimal degrees, simply replacing degree symbol decimal point. kind problem observed older datasets first recorded paper using typewriters, e.g. floating point used symbol degrees. function uses binomial test check records expected decimals 0.6 (maximum can obtained minutes, one degree 60 minutes) number records higher 0.59 certain proportion. periodicity test uses rate estimation Poisson process estimate periodicity decimals dataset (expected example rounding data collected raster format) proportional number records decimal 0 (full degrees) indicates rounding thus low precision. default values empirically optimized GBIF data, probably adapted.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_dataset.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Coordinate Cleaning using Dataset Properties — clean_dataset","text":"See https://ropensci.github.io/CoordinateCleaner/ details tutorials.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coordinate Cleaning using Dataset Properties — clean_dataset","text":"","code":"#Create test dataset clean <- data.frame(dataset = rep(\"clean\", 1000),                     decimalLongitude = runif(min = -43, max = -40, n = 1000),                     decimalLatitude = runif(min = -13, max = -10, n = 1000))                      bias.long <- c(round(runif(min = -42, max = -40, n = 500), 1),                round(runif(min = -42, max = -40, n = 300), 0),                runif(min = -42, max = -40, n = 200)) bias.lat <- c(round(runif(min = -12, max = -10, n = 500), 1),               round(runif(min = -12, max = -10, n = 300), 0),               runif(min = -12, max = -10, n = 200)) bias <- data.frame(dataset = rep(\"biased\", 1000),                    decimalLongitude = bias.long,                    decimalLatitude = bias.lat) test <- rbind(clean, bias)  if (FALSE) {                   #run clean_dataset flags <- clean_dataset(test)  #check problems #clean hist(test[test$dataset == rownames(flags[flags$summary,]), \"decimalLongitude\"]) #biased hist(test[test$dataset == rownames(flags[!flags$summary,]), \"decimalLongitude\"])  }"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_fossils.html","id":null,"dir":"Reference","previous_headings":"","what":"Geographic and Temporal Cleaning of Records from Fossil Collections — clean_fossils","title":"Geographic and Temporal Cleaning of Records from Fossil Collections — clean_fossils","text":"Cleaning records multiple empirical tests flag potentially erroneous coordinates time-spans, addressing issues common fossil collection databases. Individual tests can activated via tests argument:","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_fossils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geographic and Temporal Cleaning of Records from Fossil Collections — clean_fossils","text":"","code":"clean_fossils(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   min_age = \"min_ma\",   max_age = \"max_ma\",   taxon = \"accepted_name\",   tests = c(\"agesequal\", \"centroids\", \"equal\", \"gbif\", \"institutions\", \"spatiotemp\",     \"temprange\", \"validity\", \"zeros\"),   countries = NULL,   centroids_rad = 0.05,   centroids_detail = \"both\",   inst_rad = 0.001,   outliers_method = \"quantile\",   outliers_threshold = 5,   outliers_size = 7,   outliers_replicates = 5,   zeros_rad = 0.5,   centroids_ref = NULL,   country_ref = NULL,   inst_ref = NULL,   value = \"spatialvalid\",   verbose = TRUE,   report = FALSE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_fossils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geographic and Temporal Cleaning of Records from Fossil Collections — clean_fossils","text":"x data.frame. Containing fossil records, containing taxon names, ages, geographic coordinates.. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. min_age character string. column minimum age. Default = “min_ma”. max_age character string. column maximum age. Default = “max_ma”. taxon character string. column taxon name. “”, searches outliers entire dataset, otherwise per specified taxon. Default = “accepted_name”. tests vector character strings, indicating tests run. See details tests available. Default = c(\"centroids\", \"equal\", \"gbif\", \"institutions\", \"temprange\", \"spatiotemp\", \"agesequal\", \"zeros\") countries character string. column country assignment record three letter ISO code. Default = “countrycode”. missing, countries test skipped. centroids_rad numeric. radius around centroid coordinates meters. Default = 1000. centroids_detail character string. set ‘country’ country (adm-0) centroids tested, set ‘provinces’ province (adm-1) centroids tested.  Default = ‘’. inst_rad numeric. radius around biodiversity institutions coordinates metres. Default = 100. outliers_method method used outlier testing. See details. outliers_threshold numerical.  multiplier interquantile range outlier detection. higher number, conservative outlier tests.  See cf_outl details. Default = 3. outliers_size numerical.  minimum number records dataset run taxon-specific outlier test.  Default = 7. outliers_replicates numeric. number replications distance matrix calculation. See details.  Default = 5. zeros_rad numeric. radius around 0/0 degrees. Default = 0.5. centroids_ref data.frame alternative reference data centroid test. NULL, countryref dataset used. Alternatives must identical structure. country_ref SpatVector alternative reference countries test. NULL, rnaturalearth:ne_countries('medium', returnclass = \"sf\") dataset used. inst_ref data.frame alternative reference data biodiversity institution test. NULL, institutions dataset used.  Alternatives must identical structure. value character string defining output value. See value section details. one ‘spatialvalid’, ‘summary’, ‘clean’. Default = ‘spatialvalid’. verbose logical. TRUE reports name test number records flagged. report logical character.  TRUE report file written working directory, summarizing cleaning results. character, path file written.  Default = FALSE.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_fossils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geographic and Temporal Cleaning of Records from Fossil Collections — clean_fossils","text":"Depending output argument: “spatialvalid” object class spatialvalid similar x one column added test. TRUE = clean coordinate entry, FALSE = potentially problematic coordinate entries.  .summary column FALSE test flagged respective coordinate. “flagged” logical vector order input data summarizing results test. TRUE = clean coordinate, FALSE = potentially problematic (= least one test failed). “clean” data.frame similar x potentially problematic records removed","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_fossils.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geographic and Temporal Cleaning of Records from Fossil Collections — clean_fossils","text":"agesequal tests equal minimum maximum age. centroids tests radius around country centroids. radius centroids_rad. countries tests coordinates country indicated country column.  Switched default. equal tests equal absolute longitude latitude. gbif tests one-degree radius around GBIF headquarters Copenhagen, Denmark. institutions tests radius around known biodiversity institutions instiutions. radius inst_rad. spatiotemp test records outlier time space. See details. temprange tests records unexpectedly large temporal ranges, using quantile-based outlier test. validity checks coordinates correspond lat/lon coordinate reference system. test always , since records need pass test run. zeros tests plain zeros, equal latitude longitude radius around point 0/0. radius zeros_rad. outlier detection ‘spatiotemp’ based interquantile range test. first step distance matrix geographic distances among records calculate. Subsequently similar distance matrix temporal distances among records calculated based single point selected random minimum maximum age record. mean distance point neighbours calculated matrices spatial temporal distances scaled range. sum distanced tested interquantile range flagged outlier \\(x > IQR(x) + q_75 * mltpl\\). test replicated ‘replicates’ times, account temporal uncertainty. Records flagged outliers flagged fraction ‘flag_thresh’ replicates. datasets/taxa comprising ‘size.thresh’ records tested. Note geographic distances calculated geospheric distances datasets (taxa) fewer 10,000 records approximated Euclidean distances datasets/taxa 10,000 25,000 records. Datasets/taxa comprising 25,000 records skipped.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_fossils.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Geographic and Temporal Cleaning of Records from Fossil Collections — clean_fossils","text":"Always tests coordinate validity: non-numeric missing coordinates coordinates exceeding global extent (lon/lat, WGS84). See https://ropensci.github.io/CoordinateCleaner/ details tutorials.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/clean_fossils.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geographic and Temporal Cleaning of Records from Fossil Collections — clean_fossils","text":"","code":"minages <- runif(250, 0, 65) exmpl <- data.frame(accepted_name = sample(letters, size = 250, replace = TRUE),                     decimalLongitude = runif(250, min = 42, max = 51),                     decimalLatitude = runif(250, min = -26, max = -11),                     min_ma = minages,                     max_ma = minages + runif(250, 0.1, 65))  test <- clean_fossils(x = exmpl) #> Testing coordinate validity #> Flagged 0 records. #> Testing equal lat/lon #> Flagged 0 records. #> Testing zero coordinates #> Flagged 0 records. #> Testing country centroids #> Flagged 0 records. #> Testing spatio-temporal outliers on taxon level #> Flagged 0 records. #> Testing temporal range outliers on dataset level #> Flagged 0 records. #> Testing temporal range outliers on taxon level #> Flagged 0 records. #> Testing age validity #> Flagged 0 records. #> Testing GBIF headquarters, flagging records around Copenhagen #> Flagged 0 records. #> Testing biodiversity institutions #> Flagged 0 records. #> Flagged 0 of 250 records, EQ = 0  summary(test) #>     .aeq     .cen     .equ     .gbf    .inst     .spt     .trg     .zer  #>        0        0        0        0        0        0        0        0  #> .summary  #>        0"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/countryref.html","id":null,"dir":"Reference","previous_headings":"","what":"Country Centroids and Country Capitals — countryref","title":"Country Centroids and Country Capitals — countryref","text":"data.frame coordinates country province centroids country capitals reference clean_coordinates, cc_cen cc_cap functions. Coordinates based Central Intelligence Agency World Factbook https://www.cia.gov/-world-factbook/, https://thematicmapping.org/downloads/world_borders.php geolocate https://geo-locate.org.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/countryref.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Country Centroids and Country Capitals — countryref","text":"data frame 5,305 observations 13 variables. #' iso3 ISO-3 code country, case provinces also referring country. iso2 ISO-2 code country, case provinces also referring country. adm1_code adm code countries provinces. name factor; name country province. type identifying entry refers country province level. centroid.lon Longitude country centroid. centroid.lat Latitude country centroid. capital Name country capital, empty provinces. capital.lon Longitude country capital. capital.lat Latitude country capital. area_sqkm area country province. uncertaintyRadiusMeters uncertainty country centroid. source data source. Currently available https://geo-locate.org","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/countryref.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Country Centroids and Country Capitals — countryref","text":"CENTRAL INTELLIGENCE AGENCY (2014) World Factbook, Washington, DC. https://www.cia.gov/-world-factbook/ https://thematicmapping.org/downloads/world_borders.php https://geo-locate.org","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/countryref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Country Centroids and Country Capitals — countryref","text":"","code":"data(countryref) head(countryref) #>   iso3 iso2 adm1_code          name    type centroid.lon centroid.lat capital #> 1  AFG   AF       AFG   Afghanistan country       65.000       33.000   Kabul #> 2  AFG   AF       AFG   Afghanistan country       66.000       33.000   Kabul #> 3  AFG   AF       AFG   Afghanistan country       65.216       33.677   Kabul #> 4  ALA   AX       ALA Aland Islands country       19.952       60.198    <NA> #> 5  ALA   AX       ALA Aland Islands country       20.000       60.250    <NA> #> 6  ALB   AL       ALB       Albania country       20.000       41.000  Tirana #>   capital.lon capital.lat area_sqkm uncertaintyRadiusMeters    source #> 1       69.18       34.52 642181.62                     301 geolocate #> 2       69.18       34.52 642181.62                     301 geolocate #> 3       69.18       34.52 642181.62                    <NA>      <NA> #> 4          NA          NA        NA                    <NA>      <NA> #> 5          NA          NA        NA                    <NA>      <NA> #> 6       19.82       41.32  28335.85                     301 geolocate"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/institutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Locations of Biodiversity Institutions — institutions","title":"Global Locations of Biodiversity Institutions — institutions","text":"global gazetteer biodiversity institutions various sources, including zoos, museums, botanical gardens, GBIF contributors, herbaria, university collections.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/institutions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Global Locations of Biodiversity Institutions — institutions","text":"data frame 12170 observations 12 variables.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/institutions.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Global Locations of Biodiversity Institutions — institutions","text":"Compiled various sources: Global Biodiversity Information Facility https://www.gbif.org/ Wikipedia https://www.wikipedia.org/ Geonames https://www.geonames.org/ Global Registry Biodiversity Repositories Index Herbariorum https://sweetgum.nybg.org/science/ih/ Botanic Gardens Conservation International https://www.bgci.org/","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/institutions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Locations of Biodiversity Institutions — institutions","text":"","code":"data(institutions) str(institutions) #> tibble [11,601 × 12] (S3: tbl_df/tbl/data.frame) #>  $ name                       : chr [1:11601] \"A.N. Severtsov Institute of Ecology and Evolution, RUSSIAN ACADEMY OF SCIENCES\" \"Aarhus University\" \"Aarhus University, Science Museums\" \"Aathal Dinosaur Museum\" ... #>  $ decimalLongitude           : num [1:11601] 37.58 12.1 10.2 8.76 31.6 ... #>  $ decimalLatitude            : num [1:11601] 55.7 55.7 56.2 47.3 40.7 ... #>  $ city                       : chr [1:11601] \"Moscow\" \"Aarhus C\" \"Aarhus\" \"Aathal\" ... #>  $ country                    : chr [1:11601] \"RUS\" \"DNK\" \"DNK\" \"CHE\" ... #>  $ address                    : chr [1:11601] NA NA NA NA ... #>  $ source                     : chr [1:11601] \"GBIF\" \"grbioorg\" \"indexherbariorum\" \"wikipedia\" ... #>  $ type                       : chr [1:11601] \"Research_centre\" \"University\" \"Herbarium\" \"Museum\" ... #>  $ geocoding.precision.m      : num [1:11601] 1000 10 1000 1000 10 10 1000 1000 1000 10 ... #>  $ geocoding.issue            : chr [1:11601] NA NA NA NA ... #>  $ geocoding.source           : chr [1:11601] \"RS\" \"automatic\" \"RS\" \"CD\" ... #>  $ inside.ptoected.area.WDPAID: int [1:11601] NA NA NA NA NA NA NA NA 555575282 NA ... #>  - attr(*, \"problems\")= tibble [1 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ row     : int 1547 #>   ..$ col     : chr \"inside.ptoected.area.WDPAID\" #>   ..$ expected: chr \"no trailing characters\" #>   ..$ actual  : chr \".00E+03\" #>   ..$ file    : chr \"'institutions.csv'\" #>  - attr(*, \"spec\")= #>   .. cols( #>   ..   name = col_character(), #>   ..   decimallongitude = col_double(), #>   ..   decimallatitude = col_double(), #>   ..   city = col_character(), #>   ..   country = col_character(), #>   ..   address = col_character(), #>   ..   source = col_character(), #>   ..   type = col_character(), #>   ..   geocoding.precision.m = col_double(), #>   ..   geocoding.issue = col_character(), #>   ..   geocoding.source = col_character(), #>   ..   inside.ptoected.area.WDPAID = col_integer() #>   .. )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/is.spatialvalid.html","id":null,"dir":"Reference","previous_headings":"","what":"Check spatialvalid object — is.spatialvalid","title":"Check spatialvalid object — is.spatialvalid","text":"Test argument spatialvalid object","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/is.spatialvalid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check spatialvalid object — is.spatialvalid","text":"","code":"is.spatialvalid(x)"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/is.spatialvalid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check spatialvalid object — is.spatialvalid","text":"x object tested","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/is.spatialvalid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check spatialvalid object — is.spatialvalid","text":"returns TRUE argument spatialvalid","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/pbdb_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data from the Paleobiologydatabase — pbdb_example","title":"Example data from the Paleobiologydatabase — pbdb_example","text":"dataset 5000 flowering plant fossil occurrences example data paleobiology Database, downloaded using paleobioDB packages specified vignette “Cleaning_PBDB_fossils_with_CoordinateCleaner”.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/pbdb_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data from the Paleobiologydatabase — pbdb_example","text":"data frame 5000 observations 36 variables.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/pbdb_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example data from the Paleobiologydatabase — pbdb_example","text":"Paleobiology database https://paleobiodb.org/ Sara Varela, Javier Gonzalez Hernandez Luciano Fabris Sgarbi (2016).  paleobioDB: Download Process Data Paleobiology Database.  R package version 0.5.0. https://CRAN.R-project.org/package=paleobioDB.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/pbdb_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data from the Paleobiologydatabase — pbdb_example","text":"","code":"data(institutions) str(institutions) #> tibble [11,601 × 12] (S3: tbl_df/tbl/data.frame) #>  $ name                       : chr [1:11601] \"A.N. Severtsov Institute of Ecology and Evolution, RUSSIAN ACADEMY OF SCIENCES\" \"Aarhus University\" \"Aarhus University, Science Museums\" \"Aathal Dinosaur Museum\" ... #>  $ decimalLongitude           : num [1:11601] 37.58 12.1 10.2 8.76 31.6 ... #>  $ decimalLatitude            : num [1:11601] 55.7 55.7 56.2 47.3 40.7 ... #>  $ city                       : chr [1:11601] \"Moscow\" \"Aarhus C\" \"Aarhus\" \"Aathal\" ... #>  $ country                    : chr [1:11601] \"RUS\" \"DNK\" \"DNK\" \"CHE\" ... #>  $ address                    : chr [1:11601] NA NA NA NA ... #>  $ source                     : chr [1:11601] \"GBIF\" \"grbioorg\" \"indexherbariorum\" \"wikipedia\" ... #>  $ type                       : chr [1:11601] \"Research_centre\" \"University\" \"Herbarium\" \"Museum\" ... #>  $ geocoding.precision.m      : num [1:11601] 1000 10 1000 1000 10 10 1000 1000 1000 10 ... #>  $ geocoding.issue            : chr [1:11601] NA NA NA NA ... #>  $ geocoding.source           : chr [1:11601] \"RS\" \"automatic\" \"RS\" \"CD\" ... #>  $ inside.ptoected.area.WDPAID: int [1:11601] NA NA NA NA NA NA NA NA 555575282 NA ... #>  - attr(*, \"problems\")= tibble [1 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ row     : int 1547 #>   ..$ col     : chr \"inside.ptoected.area.WDPAID\" #>   ..$ expected: chr \"no trailing characters\" #>   ..$ actual  : chr \".00E+03\" #>   ..$ file    : chr \"'institutions.csv'\" #>  - attr(*, \"spec\")= #>   .. cols( #>   ..   name = col_character(), #>   ..   decimallongitude = col_double(), #>   ..   decimallatitude = col_double(), #>   ..   city = col_character(), #>   ..   country = col_character(), #>   ..   address = col_character(), #>   ..   source = col_character(), #>   ..   type = col_character(), #>   ..   geocoding.precision.m = col_double(), #>   ..   geocoding.issue = col_character(), #>   ..   geocoding.source = col_character(), #>   ..   inside.ptoected.area.WDPAID = col_integer() #>   .. )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/plot.spatialvalid.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Method for Class Spatialvalid — plot.spatialvalid","title":"Plot Method for Class Spatialvalid — plot.spatialvalid","text":"set plots explore objects class spatialvalid. plot visualize flags clean_coordinates","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/plot.spatialvalid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Method for Class Spatialvalid — plot.spatialvalid","text":"","code":"# S3 method for spatialvalid plot(   x,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   bgmap = NULL,   clean = TRUE,   details = FALSE,   pts_size = 1,   font_size = 10,   zoom_f = 0.1,   ... )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/plot.spatialvalid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Method for Class Spatialvalid — plot.spatialvalid","text":"x object class spatialvalid clean_coordinates. lon character string. column longitude coordinates. Default = “decimalLongitude”. lat character string. column latitude coordinates. Default = “decimalLatitude”. bgmap object class SpatVector sf used background map. Default = ggplot::borders() clean logical.  TRUE, non-flagged coordinates included map. details logical. TRUE, occurrences color-coded type flag. pts_size numeric. point size plot. font_size numeric. font size legend axes zoom_f numeric. fraction expand plotting area  occurrence records. Increase, countries show  background map. ... arguments passed methods.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/plot.spatialvalid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Method for Class Spatialvalid — plot.spatialvalid","text":"plot records flagged potentially erroneous clean_coordinates.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/plot.spatialvalid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Method for Class Spatialvalid — plot.spatialvalid","text":"","code":"exmpl <- data.frame(species = sample(letters, size = 250, replace = TRUE),                     decimalLongitude = runif(250, min = 42, max = 51),                     decimalLatitude = runif(250, min = -26, max = -11))  test <- clean_coordinates(exmpl, species = \"species\",                            tests = c(\"sea\", \"gbif\", \"zeros\"),                           verbose = FALSE)  summary(test) #>     .val     .zer     .gbf .summary  #>        0        0        0        0  plot(test)"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/write_pyrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Input Files for PyRate — write_pyrate","title":"Create Input Files for PyRate — write_pyrate","text":"Creates input necessary run Pyrate, based data.frame fossil ages (derived e.g. clean_fossils) vector extinction status sample. Creates files working directory!","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/write_pyrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Input Files for PyRate — write_pyrate","text":"","code":"write_pyrate(   x,   status,   fname,   taxon = \"accepted_name\",   min_age = \"min_ma\",   max_age = \"max_ma\",   trait = NULL,   path = getwd(),   replicates = 1,   cutoff = NULL,   random = TRUE )"},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/write_pyrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Input Files for PyRate — write_pyrate","text":"x data.frame. Containing fossil records taxon names, ages,  geographic coordinates. status vector character strings length nrow(x). Indicating record “extinct” “extant”. fname character string. prefix use output files. taxon character string. column taxon name.  Default = “accepted_name”. min_age character string. column minimum age. Default = “min_ma”. max_age character string. column maximum age. Default = “max_ma”. trait numeric vector length nrow(x). Indicating trait values record. Optional.  Default = NULL. path character string. giving absolute path write output files. Default working directory. replicates numerical. number replicates randomized age generation. See details. Default = 1. cutoff numerical. Specify threshold exclude fossil occurrences high temporal uncertainty, .e. wide temporal range min_age max_age. Examples: cutoff=NULL (default; occurrences kept data set) cutoff=5 (occurrences temporal range 5 Myr higher excluded data set) random logical. Specify whether take random age (MinT MaxT) occurrence midpoint age. Note option defaults TRUE several replicates generated (.e. replicates > 1). Examples: random = TRUE (default) random = FALSE (use midpoint ages)","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/write_pyrate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Input Files for PyRate — write_pyrate","text":"PyRate input files working directory.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/write_pyrate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Input Files for PyRate — write_pyrate","text":"replicate option allows user generate several replicates data set single input file, time re-drawing ages occurrences random uniform distributions boundaries MinT MaxT. replicates can analysed different runs (see PyRate command -j) combining results replicates way account uncertainty true ages fossil occurrences. Examples: replicates=1 (default, generates 1 data set), replicates=10 (generates 10 random replicates data set).","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/write_pyrate.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create Input Files for PyRate — write_pyrate","text":"See https://github.com/dsilvestro/PyRate/wiki details tutorials PyRate PyRate input.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/reference/write_pyrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Input Files for PyRate — write_pyrate","text":"","code":"minages <- runif(250, 0, 65) exmpl <- data.frame(accepted_name = sample(letters, size = 250, replace = TRUE),                     lng = runif(250, min = 42, max = 51),                     lat = runif(250, min = -26, max = -11),                     min_ma = minages,                     max_ma = minages + runif(250, 0.1, 65))  #a vector with the status for each record,  #make sure species are only classified as either extinct or extant,  #otherwise the function will drop an error  status <- sample(c(\"extinct\", \"extant\"), size = nrow(exmpl), replace = TRUE)  #or from a list of species status <- sample(c(\"extinct\", \"extant\"), size = length(letters), replace = TRUE) names(status) <- letters status <- status[exmpl$accepted_name]  if (FALSE) { write_pyrate(x = exmpl,fname = \"test\", status = status) }"},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"coordinatecleaner-30-2023-08-31","dir":"Changelog","previous_headings":"","what":"CoordinateCleaner 3.0 (2023-08-31)","title":"CoordinateCleaner 3.0 (2023-08-31)","text":"CRAN release: 2023-10-03","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"major-improvements-3-0","dir":"Changelog","previous_headings":"","what":"MAJOR IMPROVEMENTS","title":"CoordinateCleaner 3.0 (2023-08-31)","text":"Modified functions remove dependencies sp, raster, rgeos.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-3-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 3.0 (2023-08-31)","text":"Fixed minor errors vignettes Added option buffer cc_sea cc_coun Fixed minor bugs pointed issues","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"coordinatecleaner-20-20-2021-10-08","dir":"Changelog","previous_headings":"","what":"CoordinateCleaner 2.0-20 (2021-10-08)","title":"CoordinateCleaner 2.0-20 (2021-10-08)","text":"CRAN release: 2021-10-21","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-20","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-20 (2021-10-08)","text":"Fixed typos vignette Fixed CRAN warning rebuilding vignettes Removed defunct functions Added wordlist","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-19","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-19 (2020-10-13)","text":"Adaption Description file style.","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"coordinatecleaner-20-18-2020-10-09","dir":"Changelog","previous_headings":"","what":"CoordinateCleaner 2.0-18 (2020-10-09)","title":"CoordinateCleaner 2.0-18 (2020-10-09)","text":"CRAN release: 2020-10-14","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-18","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-18 (2020-10-09)","text":"Precomputed vignettes need internet access","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"coordinatecleaner-20-17-2020-08-18","dir":"Changelog","previous_headings":"","what":"CoordinateCleaner 2.0-17 (2020-08-18)","title":"CoordinateCleaner 2.0-17 (2020-08-18)","text":"CRAN release: 2020-08-31","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-17","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-17 (2020-08-18)","text":"Fixed bug occasionally caused invalid polygons cc_coun cc_sea Added references country centroids sources","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-16","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-16 (2020-06-19)","text":"added option adapt geographic extent plotting method objects class “spatialvalid” fixed bug handling outlier test clean_coordinates improved handling large data.frames plotting method objects class “spatialvalid” readapted default country columns name rnaturalearth column names","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"coordinatecleaner-20-15-2020-05-04","dir":"Changelog","previous_headings":"","what":"CoordinateCleaner 2.0-15 (2020-05-04)","title":"CoordinateCleaner 2.0-15 (2020-05-04)","text":"CRAN release: 2020-05-11","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-15","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-15 (2020-05-04)","text":"adapted url format description files","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-14","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-14 (2020-05-04)","text":"fixed bug cc_cen setting alternative reference added ref_col argument cc_coun customize column ISO codes reference data adapted code changes sp rgdal defunct CleanCoordinates, CleanCoordinatesDS, CleanCoordinatesFOS fixed issue input data.frame unordered rownames cc_outl fixed ‘ras found’ bug cc_outl","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-13","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-13 (2019-06-18)","text":"addressed “ras found” bug cc_outl","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-12","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-12 (2019-05-2)","text":"improved documentation cc_outl improved handling rownames cc_outl","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"coordinatecleaner-20-11-2019-04-24","dir":"Changelog","previous_headings":"","what":"CoordinateCleaner 2.0-11 (2019-04-24)","title":"CoordinateCleaner 2.0-11 (2019-04-24)","text":"CRAN release: 2019-04-24","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-11","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-11 (2019-04-24)","text":"changes description file","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-10","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-10 (2019-04-23)","text":"improved error handling cc_sea cc_urb, case default reference obtained web added reference methodology description file","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"coordinatecleaner-20-9-2019-04-02","dir":"Changelog","previous_headings":"","what":"CoordinateCleaner 2.0-9 (2019-04-02)","title":"CoordinateCleaner 2.0-9 (2019-04-02)","text":"CRAN release: 2019-04-02","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-9","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-9 (2019-04-02)","text":"recoded cc_outl, added thinning argument account sampling bias fixed bug cc_outl test, produced erroneous flags settings mltpl extended example dataset coordinate level-test suite realistic","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"coordinatecleaner-20-8-2019-03-21","dir":"Changelog","previous_headings":"","what":"CoordinateCleaner 2.0-8 (2019-03-21)","title":"CoordinateCleaner 2.0-8 (2019-03-21)","text":"CRAN release: 2019-03-21","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-8","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-8 (2019-03-21)","text":"moved vignettes online documentation added area column countryref dataset fixed minor spelling issues documentation","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"coordinatecleaner-20-7-2019-01-22","dir":"Changelog","previous_headings":"","what":"CoordinateCleaner 2.0-7 (2019-01-22)","title":"CoordinateCleaner 2.0-7 (2019-01-22)","text":"CRAN release: 2019-01-22","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-7","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-7 (2019-01-22)","text":"added citation reduced testing time CRAN improved documentation cc_outl function","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-6","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-6 (2019-01-16)","text":"url fixes","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-5","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-5 (2019-01-15)","text":"fixed broken url CIA factbook","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-4 (2019-01-14)","text":"minor bugfix cc_cap corrected duplicated vignette index entries updated maintainer email","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"coordinatecleaner-20-3-2018-10-22","dir":"Changelog","previous_headings":"","what":"CoordinateCleaner 2.0-3 (2018-10-22)","title":"CoordinateCleaner 2.0-3 (2018-10-22)","text":"CRAN release: 2018-10-24","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-3","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-3 (2018-10-22)","text":"removed convenience functionality download data rnaturalearth first use, comply CRAN guidelines","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"coordinatecleaner-20-2-2018-10-12","dir":"Changelog","previous_headings":"","what":"CoordinateCleaner 2.0-2 (2018-10-12)","title":"CoordinateCleaner 2.0-2 (2018-10-12)","text":"CRAN release: 2018-10-18","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"major-improvements-2-0-2","dir":"Changelog","previous_headings":"","what":"MAJOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-2 (2018-10-12)","text":"tutorial outlier detection bookdown documentation tutorial using custom gazetteers rasterisation heuristic cc_outl added sampling correction cc_outl added verify option cc_inst transfer rOpenSci","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-2 (2018-10-12)","text":"reduced packages size, switching data download rnaturalearth urbanareas landmass fixed issue names plot.spatialvalid grouped functions documentation webpage fixed broken links help pages ’ improved documentation structure","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"major-improvements-2-0-1","dir":"Changelog","previous_headings":"","what":"MAJOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-1 (2018-06-08)","text":"changed consistent naming scheme functions","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-2-0-1","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 2.0-1 (2018-06-08)","text":"fixed typos Readme set download naturalearth default cc_urb reduced vignette memory use size enables sf format custom references added speedup option cc_sea added webpage (https://azizka.github.io/CoordinateCleaner/)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"major-improvements-1-2-1","dir":"Changelog","previous_headings":"","what":"MAJOR IMPROVEMENTS","title":"CoordinateCleaner 1.2-1 (2018-06-08)","text":"Adapted function argument names consistently underscore_case Simplified internal code structure wrapper functions","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-1-2-1","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 1.2-1 (2018-06-08)","text":"adapted package rOpenSci reviews","code":""},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"deprecated-and-defunct-1-2-1","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"CoordinateCleaner 1.2-1 (2018-06-08)","text":"CleanCoordinates deprecated, replaced clean_coordinates CleanCoordinatesDS deprecated, replaced clean_dataset CleanCoordinatesFOS deprecated, replaced clean_fossils WritePyrate deprecated, replaced write_pyrate","code":""},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-1-1-1","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 1.1-1 (2018-05-15)","text":"Switched documentation NAMESPACE generation roxygen2 Switched sapply vapply Improved code readability","code":""},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/CoordinateCleaner/news/index.html","id":"minor-improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"CoordinateCleaner 1.1-0 (2018-04-08)","text":"Adaption code rOpenSci guidelines","code":""},{"path":[]},{"path":[]}]
